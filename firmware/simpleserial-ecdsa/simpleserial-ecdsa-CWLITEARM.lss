
simpleserial-ecdsa-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  00012cc8  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc0  08002cc0  00012cc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc0  08002cc8  00012cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000000  08002cc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000240  08002cc8  00020240  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00012cf2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa69  00000000  00000000  00012d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000127b  00000000  00000000  0001d78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000066b7  00000000  00000000  0001ea09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000480  00000000  00000000  000250c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000007f8  00000000  00000000  00025540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000048c1  00000000  00000000  00025d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001fe7  00000000  00000000  0002a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ea8  00000000  00000000  0002c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002d488  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08002b74 	.word	0x08002b74

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08002b74 	.word	0x08002b74

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f002 fca0 	bl	8002b74 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	3401      	adds	r4, #1
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	08002cc0 	.word	0x08002cc0
 800024c:	08002cc0 	.word	0x08002cc0
 8000250:	08002cc4 	.word	0x08002cc4
 8000254:	08002cc0 	.word	0x08002cc0

08000258 <memset>:
 8000258:	0783      	lsls	r3, r0, #30
 800025a:	b530      	push	{r4, r5, lr}
 800025c:	d048      	beq.n	80002f0 <memset+0x98>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03f      	beq.n	80002e4 <memset+0x8c>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e001      	b.n	800026e <memset+0x16>
 800026a:	3c01      	subs	r4, #1
 800026c:	d33a      	bcc.n	80002e4 <memset+0x8c>
 800026e:	f803 2b01 	strb.w	r2, [r3], #1
 8000272:	079d      	lsls	r5, r3, #30
 8000274:	d1f9      	bne.n	800026a <memset+0x12>
 8000276:	2c03      	cmp	r4, #3
 8000278:	d92d      	bls.n	80002d6 <memset+0x7e>
 800027a:	b2cd      	uxtb	r5, r1
 800027c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000280:	2c0f      	cmp	r4, #15
 8000282:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000286:	d936      	bls.n	80002f6 <memset+0x9e>
 8000288:	f1a4 0210 	sub.w	r2, r4, #16
 800028c:	f022 0c0f 	bic.w	ip, r2, #15
 8000290:	f103 0e20 	add.w	lr, r3, #32
 8000294:	44e6      	add	lr, ip
 8000296:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800029a:	f103 0210 	add.w	r2, r3, #16
 800029e:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a6:	3210      	adds	r2, #16
 80002a8:	4572      	cmp	r2, lr
 80002aa:	d1f8      	bne.n	800029e <memset+0x46>
 80002ac:	f10c 0201 	add.w	r2, ip, #1
 80002b0:	f014 0f0c 	tst.w	r4, #12
 80002b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b8:	f004 0c0f 	and.w	ip, r4, #15
 80002bc:	d013      	beq.n	80002e6 <memset+0x8e>
 80002be:	f1ac 0304 	sub.w	r3, ip, #4
 80002c2:	f023 0303 	bic.w	r3, r3, #3
 80002c6:	3304      	adds	r3, #4
 80002c8:	4413      	add	r3, r2
 80002ca:	f842 5b04 	str.w	r5, [r2], #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d1fb      	bne.n	80002ca <memset+0x72>
 80002d2:	f00c 0403 	and.w	r4, ip, #3
 80002d6:	b12c      	cbz	r4, 80002e4 <memset+0x8c>
 80002d8:	b2ca      	uxtb	r2, r1
 80002da:	441c      	add	r4, r3
 80002dc:	f803 2b01 	strb.w	r2, [r3], #1
 80002e0:	429c      	cmp	r4, r3
 80002e2:	d1fb      	bne.n	80002dc <memset+0x84>
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	4664      	mov	r4, ip
 80002e8:	4613      	mov	r3, r2
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	d1f4      	bne.n	80002d8 <memset+0x80>
 80002ee:	e7f9      	b.n	80002e4 <memset+0x8c>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4614      	mov	r4, r2
 80002f4:	e7bf      	b.n	8000276 <memset+0x1e>
 80002f6:	461a      	mov	r2, r3
 80002f8:	46a4      	mov	ip, r4
 80002fa:	e7e0      	b.n	80002be <memset+0x66>

080002fc <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 80002fc:	b510      	push	{r4, lr}
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 80002fe:	3a01      	subs	r2, #1
 8000300:	b252      	sxtb	r2, r2
 8000302:	0613      	lsls	r3, r2, #24
 8000304:	d501      	bpl.n	800030a <uECC_vli_cmp_unsafe+0xe>
      return 1;
    } else if (left[i] < right[i]) {
      return -1;
    }
  }
  return 0;
 8000306:	2000      	movs	r0, #0
}
 8000308:	bd10      	pop	{r4, pc}
    if (left[i] > right[i]) {
 800030a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800030e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000312:	429c      	cmp	r4, r3
 8000314:	d805      	bhi.n	8000322 <uECC_vli_cmp_unsafe+0x26>
    } else if (left[i] < right[i]) {
 8000316:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800031a:	d2f2      	bcs.n	8000302 <uECC_vli_cmp_unsafe+0x6>
      return -1;
 800031c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000320:	e7f2      	b.n	8000308 <uECC_vli_cmp_unsafe+0xc>
      return 1;
 8000322:	2001      	movs	r0, #1
 8000324:	e7f0      	b.n	8000308 <uECC_vli_cmp_unsafe+0xc>
 8000326:	0000      	movs	r0, r0

08000328 <setreg>:

uint8_t pcsamp_enable;

uint8_t setreg(uint8_t *x, uint8_t len) {
  uint32_t val;
  val = x[4] + (x[3] << 8) + (x[2] << 16) + (x[1] << 24);
 8000328:	78c2      	ldrb	r2, [r0, #3]
 800032a:	7903      	ldrb	r3, [r0, #4]
 800032c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000330:	7882      	ldrb	r2, [r0, #2]
 8000332:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8000336:	7842      	ldrb	r2, [r0, #1]
 8000338:	eb03 6302 	add.w	r3, r3, r2, lsl #24
  // 8:  TPI->ACPR
  // 9:  TPI->SPPR
  // 10: TPI->FFCR
  // 11: TPI->CSPSR
  // 12: ITM->TCR
  if (x[0] == 0) {
 800033c:	7802      	ldrb	r2, [r0, #0]
 800033e:	b912      	cbnz	r2, 8000346 <setreg+0x1e>
    DWT->CTRL = val;
 8000340:	4a2e      	ldr	r2, [pc, #184]	; (80003fc <setreg+0xd4>)
  } else if (x[0] == 2) {
    DWT->COMP1 = val;
  } else if (x[0] == 3) {
    ETM_SetupMode();
    ETM->CR = val;
    ETM_TraceMode();
 8000342:	6013      	str	r3, [r2, #0]
 8000344:	e003      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 1) {
 8000346:	2a01      	cmp	r2, #1
 8000348:	d103      	bne.n	8000352 <setreg+0x2a>
    DWT->COMP0 = val;
 800034a:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <setreg+0xd4>)
 800034c:	6213      	str	r3, [r2, #32]
  } else if (x[0] == 12) {
    ITM->TCR = val;
  }

  return 0x00;
}
 800034e:	2000      	movs	r0, #0
 8000350:	4770      	bx	lr
  } else if (x[0] == 2) {
 8000352:	2a02      	cmp	r2, #2
 8000354:	d102      	bne.n	800035c <setreg+0x34>
    DWT->COMP1 = val;
 8000356:	4a29      	ldr	r2, [pc, #164]	; (80003fc <setreg+0xd4>)
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
 800035a:	e7f8      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 3) {
 800035c:	2a03      	cmp	r2, #3
 800035e:	d109      	bne.n	8000374 <setreg+0x4c>
    ETM_SetupMode();
 8000360:	4a27      	ldr	r2, [pc, #156]	; (8000400 <setreg+0xd8>)
 8000362:	6811      	ldr	r1, [r2, #0]
 8000364:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000368:	6011      	str	r1, [r2, #0]
    ETM->CR = val;
 800036a:	6013      	str	r3, [r2, #0]
    ETM_TraceMode();
 800036c:	6813      	ldr	r3, [r2, #0]
 800036e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000372:	e7e6      	b.n	8000342 <setreg+0x1a>
  } else if (x[0] == 4) {
 8000374:	2a04      	cmp	r2, #4
 8000376:	d107      	bne.n	8000388 <setreg+0x60>
    ETM_SetupMode();
 8000378:	4a21      	ldr	r2, [pc, #132]	; (8000400 <setreg+0xd8>)
 800037a:	6811      	ldr	r1, [r2, #0]
 800037c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000380:	6011      	str	r1, [r2, #0]
    ETM->TESSEICR = val;
 8000382:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
    ETM_TraceMode();
 8000386:	e7f1      	b.n	800036c <setreg+0x44>
  } else if (x[0] == 5) {
 8000388:	2a05      	cmp	r2, #5
 800038a:	d106      	bne.n	800039a <setreg+0x72>
    ETM_SetupMode();
 800038c:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <setreg+0xd8>)
 800038e:	6811      	ldr	r1, [r2, #0]
 8000390:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000394:	6011      	str	r1, [r2, #0]
    ETM->TEEVR = val;
 8000396:	6213      	str	r3, [r2, #32]
    ETM_TraceMode();
 8000398:	e7e8      	b.n	800036c <setreg+0x44>
  } else if (x[0] == 6) {
 800039a:	2a06      	cmp	r2, #6
 800039c:	d106      	bne.n	80003ac <setreg+0x84>
    ETM_SetupMode();
 800039e:	4a18      	ldr	r2, [pc, #96]	; (8000400 <setreg+0xd8>)
 80003a0:	6811      	ldr	r1, [r2, #0]
 80003a2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80003a6:	6011      	str	r1, [r2, #0]
    ETM->TECR1 = val;
 80003a8:	6253      	str	r3, [r2, #36]	; 0x24
    ETM_TraceMode();
 80003aa:	e7df      	b.n	800036c <setreg+0x44>
  } else if (x[0] == 7) {
 80003ac:	2a07      	cmp	r2, #7
 80003ae:	d107      	bne.n	80003c0 <setreg+0x98>
    ETM_SetupMode();
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <setreg+0xd8>)
 80003b2:	6811      	ldr	r1, [r2, #0]
 80003b4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80003b8:	6011      	str	r1, [r2, #0]
    ETM->TRACEIDR = val;
 80003ba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ETM_TraceMode();
 80003be:	e7d5      	b.n	800036c <setreg+0x44>
  } else if (x[0] == 8) {
 80003c0:	2a08      	cmp	r2, #8
 80003c2:	d102      	bne.n	80003ca <setreg+0xa2>
    TPI->ACPR = val;
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <setreg+0xdc>)
 80003c6:	6113      	str	r3, [r2, #16]
 80003c8:	e7c1      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 9) {
 80003ca:	2a09      	cmp	r2, #9
 80003cc:	d103      	bne.n	80003d6 <setreg+0xae>
    TPI->SPPR = val;
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <setreg+0xdc>)
 80003d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80003d4:	e7bb      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 10) {
 80003d6:	2a0a      	cmp	r2, #10
 80003d8:	d103      	bne.n	80003e2 <setreg+0xba>
    TPI->FFCR = val;
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <setreg+0xdc>)
 80003dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80003e0:	e7b5      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 11) {
 80003e2:	2a0b      	cmp	r2, #11
 80003e4:	d102      	bne.n	80003ec <setreg+0xc4>
    TPI->CSPSR = val;
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <setreg+0xdc>)
 80003e8:	6053      	str	r3, [r2, #4]
 80003ea:	e7b0      	b.n	800034e <setreg+0x26>
  } else if (x[0] == 12) {
 80003ec:	2a0c      	cmp	r2, #12
    ITM->TCR = val;
 80003ee:	bf04      	itt	eq
 80003f0:	f04f 4260 	moveq.w	r2, #3758096384	; 0xe0000000
 80003f4:	f8c2 3e80 	streq.w	r3, [r2, #3712]	; 0xe80
 80003f8:	e7a9      	b.n	800034e <setreg+0x26>
 80003fa:	bf00      	nop
 80003fc:	e0001000 	.word	0xe0001000
 8000400:	e0041000 	.word	0xe0041000
 8000404:	e0040000 	.word	0xe0040000

08000408 <set_px>:
    led_ok(i = !i);
    delay_ms(10);
  }
}

uint8_t set_px(uint8_t *x, uint8_t len) {
 8000408:	2300      	movs	r3, #0
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <set_px+0x30>)
 800040c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i, j;
  for (i = 0; i < 8; i++) {
    P[7 - i] = 0;
 800040e:	461f      	mov	r7, r3
 8000410:	f842 7904 	str.w	r7, [r2], #-4
    for (j = 0; j < 4; j++) {
 8000414:	18c6      	adds	r6, r0, r3
    P[7 - i] = 0;
 8000416:	2118      	movs	r1, #24
      P[7 - i] |= x[i * 4 + j] << ((3 - j) * 8);
 8000418:	f816 4b01 	ldrb.w	r4, [r6], #1
 800041c:	fa04 f501 	lsl.w	r5, r4, r1
 8000420:	6854      	ldr	r4, [r2, #4]
    for (j = 0; j < 4; j++) {
 8000422:	3908      	subs	r1, #8
      P[7 - i] |= x[i * 4 + j] << ((3 - j) * 8);
 8000424:	432c      	orrs	r4, r5
    for (j = 0; j < 4; j++) {
 8000426:	f111 0f08 	cmn.w	r1, #8
      P[7 - i] |= x[i * 4 + j] << ((3 - j) * 8);
 800042a:	6054      	str	r4, [r2, #4]
    for (j = 0; j < 4; j++) {
 800042c:	d1f4      	bne.n	8000418 <set_px+0x10>
  for (i = 0; i < 8; i++) {
 800042e:	3304      	adds	r3, #4
 8000430:	2b20      	cmp	r3, #32
 8000432:	d1ed      	bne.n	8000410 <set_px+0x8>
    }
  }

  return 0x00;
}
 8000434:	2000      	movs	r0, #0
 8000436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000438:	20000038 	.word	0x20000038

0800043c <set_py>:

uint8_t set_py(uint8_t *y, uint8_t len) {
 800043c:	2300      	movs	r3, #0
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <set_py+0x30>)
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TODO: this conversion is used in multiple places, move it to a function:
  int i, j;
  for (i = 0; i < 8; i++) {
    P[15 - i] = 0;
 8000442:	461f      	mov	r7, r3
 8000444:	f842 7904 	str.w	r7, [r2], #-4
    for (j = 0; j < 4; j++) {
 8000448:	18c6      	adds	r6, r0, r3
    P[15 - i] = 0;
 800044a:	2118      	movs	r1, #24
      P[15 - i] |= y[i * 4 + j] << ((3 - j) * 8);
 800044c:	f816 4b01 	ldrb.w	r4, [r6], #1
 8000450:	fa04 f501 	lsl.w	r5, r4, r1
 8000454:	6854      	ldr	r4, [r2, #4]
    for (j = 0; j < 4; j++) {
 8000456:	3908      	subs	r1, #8
      P[15 - i] |= y[i * 4 + j] << ((3 - j) * 8);
 8000458:	432c      	orrs	r4, r5
    for (j = 0; j < 4; j++) {
 800045a:	f111 0f08 	cmn.w	r1, #8
      P[15 - i] |= y[i * 4 + j] << ((3 - j) * 8);
 800045e:	6054      	str	r4, [r2, #4]
    for (j = 0; j < 4; j++) {
 8000460:	d1f4      	bne.n	800044c <set_py+0x10>
  for (i = 0; i < 8; i++) {
 8000462:	3304      	adds	r3, #4
 8000464:	2b20      	cmp	r3, #32
 8000466:	d1ed      	bne.n	8000444 <set_py+0x8>
    }
  }
  return 0x00;
}
 8000468:	2000      	movs	r0, #0
 800046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046c:	20000058 	.word	0x20000058

08000470 <reset>:
}

uint8_t reset(uint8_t *x, uint8_t len) {
  // Reset key here if needed
  return 0x00;
}
 8000470:	2000      	movs	r0, #0
 8000472:	4770      	bx	lr

08000474 <rng_fn>:
  }
  simpleserial_put('r', sizeof(public_key), public_key);
  return 0x00;
}

int rng_fn(uint8_t *dest, unsigned int size) {
 8000474:	b508      	push	{r3, lr}
 8000476:	460a      	mov	r2, r1
  // chosen by fair dice roll.
  // guaranteed to be random.
  // https://xkcd.com/221/
  for (unsigned int i = 0; i < size; i++) {
    dest[i] = 42;
 8000478:	212a      	movs	r1, #42	; 0x2a
 800047a:	f7ff feed 	bl	8000258 <memset>
  }
  return 1;
}
 800047e:	2001      	movs	r0, #1
 8000480:	bd08      	pop	{r3, pc}
 8000482:	0000      	movs	r0, r0

08000484 <getreg>:
uint8_t getreg(uint8_t *x, uint8_t len) {
 8000484:	b508      	push	{r3, lr}
  if (x[0] == 0) {
 8000486:	7803      	ldrb	r3, [r0, #0]
uint8_t getreg(uint8_t *x, uint8_t len) {
 8000488:	4602      	mov	r2, r0
  if (x[0] == 0) {
 800048a:	b913      	cbnz	r3, 8000492 <getreg+0xe>
    val = DWT->CTRL;
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <getreg+0xa8>)
    val = ETM->CR;
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	e008      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 1) {
 8000492:	2b01      	cmp	r3, #1
 8000494:	d102      	bne.n	800049c <getreg+0x18>
    val = DWT->COMP0;
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <getreg+0xa8>)
    val = ETM->TEEVR;
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	e003      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 2) {
 800049c:	2b02      	cmp	r3, #2
 800049e:	d10e      	bne.n	80004be <getreg+0x3a>
    val = DWT->COMP1;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <getreg+0xa8>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  x[3] = val & 0xff;
 80004a4:	70d3      	strb	r3, [r2, #3]
  x[2] = (val >> 8) & 0xff;
 80004a6:	0a19      	lsrs	r1, r3, #8
 80004a8:	7091      	strb	r1, [r2, #2]
  x[1] = (val >> 16) & 0xff;
 80004aa:	0c19      	lsrs	r1, r3, #16
  x[0] = (val >> 24) & 0xff;
 80004ac:	0e1b      	lsrs	r3, r3, #24
  x[1] = (val >> 16) & 0xff;
 80004ae:	7051      	strb	r1, [r2, #1]
  x[0] = (val >> 24) & 0xff;
 80004b0:	7013      	strb	r3, [r2, #0]
  simpleserial_put('r', 4, x);
 80004b2:	2104      	movs	r1, #4
 80004b4:	2072      	movs	r0, #114	; 0x72
 80004b6:	f001 fb73 	bl	8001ba0 <simpleserial_put>
}
 80004ba:	2000      	movs	r0, #0
 80004bc:	bd08      	pop	{r3, pc}
  } else if (x[0] == 3) {
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d101      	bne.n	80004c6 <getreg+0x42>
    val = ETM->CR;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <getreg+0xac>)
 80004c4:	e7e3      	b.n	800048e <getreg+0xa>
  } else if (x[0] == 4) {
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d103      	bne.n	80004d2 <getreg+0x4e>
    val = ETM->TESSEICR;
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <getreg+0xac>)
 80004cc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80004d0:	e7e8      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 5) {
 80004d2:	2b05      	cmp	r3, #5
 80004d4:	d101      	bne.n	80004da <getreg+0x56>
    val = ETM->TEEVR;
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <getreg+0xac>)
 80004d8:	e7de      	b.n	8000498 <getreg+0x14>
  } else if (x[0] == 6) {
 80004da:	2b06      	cmp	r3, #6
 80004dc:	d102      	bne.n	80004e4 <getreg+0x60>
    val = ETM->TECR1;
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <getreg+0xac>)
 80004e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e2:	e7df      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 7) {
 80004e4:	2b07      	cmp	r3, #7
 80004e6:	d103      	bne.n	80004f0 <getreg+0x6c>
    val = ETM->TRACEIDR;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <getreg+0xac>)
 80004ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004ee:	e7d9      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 8) {
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d102      	bne.n	80004fa <getreg+0x76>
    val = TPI->ACPR;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <getreg+0xb0>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	e7d4      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 9) {
 80004fa:	2b09      	cmp	r3, #9
 80004fc:	d103      	bne.n	8000506 <getreg+0x82>
    val = TPI->SPPR;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <getreg+0xb0>)
 8000500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000504:	e7ce      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 10) {
 8000506:	2b0a      	cmp	r3, #10
 8000508:	d103      	bne.n	8000512 <getreg+0x8e>
    val = TPI->FFCR;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <getreg+0xb0>)
 800050c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000510:	e7c8      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 11) {
 8000512:	2b0b      	cmp	r3, #11
 8000514:	d102      	bne.n	800051c <getreg+0x98>
    val = TPI->CSPSR;
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <getreg+0xb0>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	e7c3      	b.n	80004a4 <getreg+0x20>
  } else if (x[0] == 12) {
 800051c:	2b0c      	cmp	r3, #12
    val = ITM->TCR;
 800051e:	bf0a      	itet	eq
 8000520:	f04f 4360 	moveq.w	r3, #3758096384	; 0xe0000000
    val = 0;
 8000524:	2300      	movne	r3, #0
    val = ITM->TCR;
 8000526:	f8d3 3e80 	ldreq.w	r3, [r3, #3712]	; 0xe80
 800052a:	e7bb      	b.n	80004a4 <getreg+0x20>
 800052c:	e0001000 	.word	0xe0001000
 8000530:	e0041000 	.word	0xe0041000
 8000534:	e0040000 	.word	0xe0040000

08000538 <set_pcsample_params>:
uint8_t set_pcsample_params(uint8_t *x, uint8_t len) {
 8000538:	b538      	push	{r3, r4, r5, lr}
  pcsamp_enable = x[0] & 1;
 800053a:	7803      	ldrb	r3, [r0, #0]
 800053c:	4911      	ldr	r1, [pc, #68]	; (8000584 <set_pcsample_params+0x4c>)
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  cyctap = x[1] & 1;
 8000546:	7843      	ldrb	r3, [r0, #1]
  postinit = x[2] & 0xf;
 8000548:	7881      	ldrb	r1, [r0, #2]
  cyctap = x[1] & 1;
 800054a:	f003 0401 	and.w	r4, r3, #1
  postreset = x[3] & 0xf;
 800054e:	78c3      	ldrb	r3, [r0, #3]
  postinit = x[2] & 0xf;
 8000550:	f001 010f 	and.w	r1, r1, #15
  DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000554:	0149      	lsls	r1, r1, #5
  postreset = x[3] & 0xf;
 8000556:	f003 030f 	and.w	r3, r3, #15
              (postreset << DWT_CTRL_POSTPRESET_Pos) |
 800055a:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
 800055e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
uint8_t set_pcsample_params(uint8_t *x, uint8_t len) {
 8000562:	4602      	mov	r2, r0
              (1 << DWT_CTRL_SYNCTAP_Pos) | (1 << DWT_CTRL_CYCCNTENA_Pos);
 8000564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  DWT->CTRL = 0;
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <set_pcsample_params+0x50>)
 800056a:	2500      	movs	r5, #0
              (1 << DWT_CTRL_SYNCTAP_Pos) | (1 << DWT_CTRL_CYCCNTENA_Pos);
 800056c:	f043 0301 	orr.w	r3, r3, #1
  DWT->CTRL = 0;
 8000570:	6005      	str	r5, [r0, #0]
  DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000572:	6001      	str	r1, [r0, #0]
  DWT->CTRL = (cyctap << DWT_CTRL_CYCTAP_Pos) |
 8000574:	6003      	str	r3, [r0, #0]
  simpleserial_put('r', 4, x);
 8000576:	2104      	movs	r1, #4
 8000578:	2072      	movs	r0, #114	; 0x72
 800057a:	f001 fb11 	bl	8001ba0 <simpleserial_put>
}
 800057e:	4628      	mov	r0, r5
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	2000001c 	.word	0x2000001c
 8000588:	e0001000 	.word	0xe0001000

0800058c <get_qx>:
uint8_t get_qx(uint8_t *x, uint8_t len) {
 800058c:	b538      	push	{r3, r4, r5, lr}
 800058e:	4602      	mov	r2, r0
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <get_qx+0x30>)
 8000592:	2100      	movs	r1, #0
    for (j = 0; j < 4; j++) {
 8000594:	1855      	adds	r5, r2, r1
uint8_t get_qx(uint8_t *x, uint8_t len) {
 8000596:	2318      	movs	r3, #24
      x[i * 4 + j] = (int)((Q[7 - i] >> (3 - j) * 8) & 255);
 8000598:	69c4      	ldr	r4, [r0, #28]
 800059a:	40dc      	lsrs	r4, r3
    for (j = 0; j < 4; j++) {
 800059c:	3b08      	subs	r3, #8
 800059e:	f113 0f08 	cmn.w	r3, #8
      x[i * 4 + j] = (int)((Q[7 - i] >> (3 - j) * 8) & 255);
 80005a2:	f805 4b01 	strb.w	r4, [r5], #1
    for (j = 0; j < 4; j++) {
 80005a6:	d1f7      	bne.n	8000598 <get_qx+0xc>
  for (i = 0; i < 8; i++) {
 80005a8:	3104      	adds	r1, #4
 80005aa:	2920      	cmp	r1, #32
 80005ac:	f1a0 0004 	sub.w	r0, r0, #4
 80005b0:	d1f0      	bne.n	8000594 <get_qx+0x8>
  simpleserial_put('r', 32, x);
 80005b2:	2072      	movs	r0, #114	; 0x72
 80005b4:	f001 faf4 	bl	8001ba0 <simpleserial_put>
}
 80005b8:	2000      	movs	r0, #0
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000060 	.word	0x20000060

080005c0 <get_qy>:
uint8_t get_qy(uint8_t *y, uint8_t len) {
 80005c0:	b538      	push	{r3, r4, r5, lr}
 80005c2:	4602      	mov	r2, r0
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <get_qy+0x30>)
 80005c6:	2100      	movs	r1, #0
    for (j = 0; j < 4; j++) {
 80005c8:	1855      	adds	r5, r2, r1
uint8_t get_qy(uint8_t *y, uint8_t len) {
 80005ca:	2318      	movs	r3, #24
      y[i * 4 + j] = (int)((Q[15 - i] >> (3 - j) * 8) & 255);
 80005cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80005ce:	40dc      	lsrs	r4, r3
    for (j = 0; j < 4; j++) {
 80005d0:	3b08      	subs	r3, #8
 80005d2:	f113 0f08 	cmn.w	r3, #8
      y[i * 4 + j] = (int)((Q[15 - i] >> (3 - j) * 8) & 255);
 80005d6:	f805 4b01 	strb.w	r4, [r5], #1
    for (j = 0; j < 4; j++) {
 80005da:	d1f7      	bne.n	80005cc <get_qy+0xc>
  for (i = 0; i < 8; i++) {
 80005dc:	3104      	adds	r1, #4
 80005de:	2920      	cmp	r1, #32
 80005e0:	f1a0 0004 	sub.w	r0, r0, #4
 80005e4:	d1f0      	bne.n	80005c8 <get_qy+0x8>
  simpleserial_put('r', 32, y);
 80005e6:	2072      	movs	r0, #114	; 0x72
 80005e8:	f001 fada 	bl	8001ba0 <simpleserial_put>
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	bd38      	pop	{r3, r4, r5, pc}
 80005f0:	20000060 	.word	0x20000060

080005f4 <infinite_led_blink_red>:
static void infinite_led_blink_red() {
 80005f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int i = 0;
 80005f6:	2400      	movs	r4, #0
  for (volatile unsigned int i = 0; i < loops; i++) {
 80005f8:	4625      	mov	r5, r4
 80005fa:	f644 76f5 	movw	r6, #20469	; 0x4ff5
    led_error(i = !i);
 80005fe:	f084 0401 	eor.w	r4, r4, #1
 8000602:	4620      	mov	r0, r4
 8000604:	f001 fc64 	bl	8001ed0 <change_err_led>
  for (volatile unsigned int i = 0; i < loops; i++) {
 8000608:	9501      	str	r5, [sp, #4]
 800060a:	9b01      	ldr	r3, [sp, #4]
 800060c:	42b3      	cmp	r3, r6
 800060e:	d8f6      	bhi.n	80005fe <infinite_led_blink_red+0xa>
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	e7f8      	b.n	800060a <infinite_led_blink_red+0x16>

08000618 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000618:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 800061a:	4603      	mov	r3, r0
 800061c:	2000      	movs	r0, #0
 800061e:	c910      	ldmia	r1!, {r4}
 8000620:	ca20      	ldmia	r2!, {r5}
 8000622:	1964      	adds	r4, r4, r5
 8000624:	c310      	stmia	r3!, {r4}
 8000626:	c910      	ldmia	r1!, {r4}
 8000628:	ca20      	ldmia	r2!, {r5}
 800062a:	416c      	adcs	r4, r5
 800062c:	c310      	stmia	r3!, {r4}
 800062e:	c910      	ldmia	r1!, {r4}
 8000630:	ca20      	ldmia	r2!, {r5}
 8000632:	416c      	adcs	r4, r5
 8000634:	c310      	stmia	r3!, {r4}
 8000636:	c910      	ldmia	r1!, {r4}
 8000638:	ca20      	ldmia	r2!, {r5}
 800063a:	416c      	adcs	r4, r5
 800063c:	c310      	stmia	r3!, {r4}
 800063e:	c910      	ldmia	r1!, {r4}
 8000640:	ca20      	ldmia	r2!, {r5}
 8000642:	416c      	adcs	r4, r5
 8000644:	c310      	stmia	r3!, {r4}
 8000646:	c910      	ldmia	r1!, {r4}
 8000648:	ca20      	ldmia	r2!, {r5}
 800064a:	416c      	adcs	r4, r5
 800064c:	c310      	stmia	r3!, {r4}
 800064e:	c910      	ldmia	r1!, {r4}
 8000650:	ca20      	ldmia	r2!, {r5}
 8000652:	416c      	adcs	r4, r5
 8000654:	c310      	stmia	r3!, {r4}
 8000656:	c910      	ldmia	r1!, {r4}
 8000658:	ca20      	ldmia	r2!, {r5}
 800065a:	416c      	adcs	r4, r5
 800065c:	c310      	stmia	r3!, {r4}
 800065e:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
 8000660:	bd30      	pop	{r4, r5, pc}

08000662 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000662:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 8000664:	2300      	movs	r3, #0
 8000666:	c910      	ldmia	r1!, {r4}
 8000668:	ca20      	ldmia	r2!, {r5}
 800066a:	1b64      	subs	r4, r4, r5
 800066c:	c010      	stmia	r0!, {r4}
 800066e:	c910      	ldmia	r1!, {r4}
 8000670:	ca20      	ldmia	r2!, {r5}
 8000672:	41ac      	sbcs	r4, r5
 8000674:	c010      	stmia	r0!, {r4}
 8000676:	c910      	ldmia	r1!, {r4}
 8000678:	ca20      	ldmia	r2!, {r5}
 800067a:	41ac      	sbcs	r4, r5
 800067c:	c010      	stmia	r0!, {r4}
 800067e:	c910      	ldmia	r1!, {r4}
 8000680:	ca20      	ldmia	r2!, {r5}
 8000682:	41ac      	sbcs	r4, r5
 8000684:	c010      	stmia	r0!, {r4}
 8000686:	c910      	ldmia	r1!, {r4}
 8000688:	ca20      	ldmia	r2!, {r5}
 800068a:	41ac      	sbcs	r4, r5
 800068c:	c010      	stmia	r0!, {r4}
 800068e:	c910      	ldmia	r1!, {r4}
 8000690:	ca20      	ldmia	r2!, {r5}
 8000692:	41ac      	sbcs	r4, r5
 8000694:	c010      	stmia	r0!, {r4}
 8000696:	c910      	ldmia	r1!, {r4}
 8000698:	ca20      	ldmia	r2!, {r5}
 800069a:	41ac      	sbcs	r4, r5
 800069c:	c010      	stmia	r0!, {r4}
 800069e:	c910      	ldmia	r1!, {r4}
 80006a0:	ca20      	ldmia	r2!, {r5}
 80006a2:	41ac      	sbcs	r4, r5
 80006a4:	c010      	stmia	r0!, {r4}
 80006a6:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
                      (for some reason...) */
}
 80006a8:	fab3 f083 	clz	r0, r3
 80006ac:	0940      	lsrs	r0, r0, #5
 80006ae:	bd30      	pop	{r4, r5, pc}

080006b0 <uECC_vli_mult>:
        );
        return;
    }
#endif
#if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
    if (num_words == 8) {
 80006b0:	2b08      	cmp	r3, #8
                                wordcount_t num_words) {
 80006b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (num_words == 8) {
 80006b6:	f040 8102 	bne.w	80008be <uECC_vli_mult+0x20e>
        __asm__ volatile (
 80006ba:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 80006bc:	f851 eb04 	ldr.w	lr, [r1], #4
 80006c0:	fba4 890e 	umull	r8, r9, r4, lr
 80006c4:	f840 8b04 	str.w	r8, [r0], #4
 80006c8:	f04f 0a00 	mov.w	sl, #0
 80006cc:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006d0:	f04f 0b00 	mov.w	fp, #0
 80006d4:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80006d8:	f04f 0c00 	mov.w	ip, #0
 80006dc:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80006e0:	f851 eb04 	ldr.w	lr, [r1], #4
 80006e4:	f04f 0800 	mov.w	r8, #0
 80006e8:	fbe4 896e 	umaal	r8, r9, r4, lr
 80006ec:	f840 8b04 	str.w	r8, [r0], #4
 80006f0:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006f4:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80006f8:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80006fc:	f851 eb04 	ldr.w	lr, [r1], #4
 8000700:	f04f 0800 	mov.w	r8, #0
 8000704:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000708:	f840 8b04 	str.w	r8, [r0], #4
 800070c:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000710:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000714:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000718:	f851 eb04 	ldr.w	lr, [r1], #4
 800071c:	f04f 0800 	mov.w	r8, #0
 8000720:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000724:	f840 8b04 	str.w	r8, [r0], #4
 8000728:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800072c:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000730:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000734:	f851 eb04 	ldr.w	lr, [r1], #4
 8000738:	f04f 0800 	mov.w	r8, #0
 800073c:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000740:	f840 8b04 	str.w	r8, [r0], #4
 8000744:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000748:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800074c:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000750:	f851 eb04 	ldr.w	lr, [r1], #4
 8000754:	f04f 0800 	mov.w	r8, #0
 8000758:	fbe4 896e 	umaal	r8, r9, r4, lr
 800075c:	f840 8b04 	str.w	r8, [r0], #4
 8000760:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000764:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000768:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800076c:	f851 eb04 	ldr.w	lr, [r1], #4
 8000770:	f04f 0800 	mov.w	r8, #0
 8000774:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000778:	f840 8b04 	str.w	r8, [r0], #4
 800077c:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000780:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000784:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000788:	f851 eb04 	ldr.w	lr, [r1], #4
 800078c:	f04f 0800 	mov.w	r8, #0
 8000790:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000794:	f840 8b04 	str.w	r8, [r0], #4
 8000798:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800079c:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80007a0:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80007a4:	f840 9b04 	str.w	r9, [r0], #4
 80007a8:	f840 ab04 	str.w	sl, [r0], #4
 80007ac:	f840 bb04 	str.w	fp, [r0], #4
 80007b0:	f840 cb04 	str.w	ip, [r0], #4
 80007b4:	f1a0 0020 	sub.w	r0, r0, #32
 80007b8:	f1a1 0120 	sub.w	r1, r1, #32
 80007bc:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 80007be:	f851 eb04 	ldr.w	lr, [r1], #4
 80007c2:	f8d0 8000 	ldr.w	r8, [r0]
 80007c6:	f04f 0900 	mov.w	r9, #0
 80007ca:	fbe4 896e 	umaal	r8, r9, r4, lr
 80007ce:	f840 8b04 	str.w	r8, [r0], #4
 80007d2:	f04f 0a00 	mov.w	sl, #0
 80007d6:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80007da:	f04f 0b00 	mov.w	fp, #0
 80007de:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80007e2:	f04f 0c00 	mov.w	ip, #0
 80007e6:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80007ea:	f851 eb04 	ldr.w	lr, [r1], #4
 80007ee:	f8d0 8000 	ldr.w	r8, [r0]
 80007f2:	fbe4 896e 	umaal	r8, r9, r4, lr
 80007f6:	f840 8b04 	str.w	r8, [r0], #4
 80007fa:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80007fe:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000802:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000806:	f851 eb04 	ldr.w	lr, [r1], #4
 800080a:	f8d0 8000 	ldr.w	r8, [r0]
 800080e:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000812:	f840 8b04 	str.w	r8, [r0], #4
 8000816:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800081a:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800081e:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000822:	f851 eb04 	ldr.w	lr, [r1], #4
 8000826:	f8d0 8000 	ldr.w	r8, [r0]
 800082a:	fbe4 896e 	umaal	r8, r9, r4, lr
 800082e:	f840 8b04 	str.w	r8, [r0], #4
 8000832:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000836:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800083a:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800083e:	f851 eb04 	ldr.w	lr, [r1], #4
 8000842:	f8d0 8000 	ldr.w	r8, [r0]
 8000846:	fbe4 896e 	umaal	r8, r9, r4, lr
 800084a:	f840 8b04 	str.w	r8, [r0], #4
 800084e:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000852:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000856:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800085a:	f851 eb04 	ldr.w	lr, [r1], #4
 800085e:	f8d0 8000 	ldr.w	r8, [r0]
 8000862:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000866:	f840 8b04 	str.w	r8, [r0], #4
 800086a:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800086e:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000872:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000876:	f851 eb04 	ldr.w	lr, [r1], #4
 800087a:	f8d0 8000 	ldr.w	r8, [r0]
 800087e:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000882:	f840 8b04 	str.w	r8, [r0], #4
 8000886:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800088a:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800088e:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000892:	f851 eb04 	ldr.w	lr, [r1], #4
 8000896:	f8d0 8000 	ldr.w	r8, [r0]
 800089a:	fbe4 896e 	umaal	r8, r9, r4, lr
 800089e:	f840 8b04 	str.w	r8, [r0], #4
 80008a2:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80008a6:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80008aa:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80008ae:	f840 9b04 	str.w	r9, [r0], #4
 80008b2:	f840 ab04 	str.w	sl, [r0], #4
 80008b6:	f840 bb04 	str.w	fp, [r0], #4
 80008ba:	f840 cb04 	str.w	ip, [r0], #4
            : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
        );
        return;
    }
#endif
}
 80008be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008c2 <uECC_vli_clear>:
    vli[i] = 0;
 80008c2:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	2100      	movs	r1, #0
 80008ca:	f7ff bcc5 	b.w	8000258 <memset>

080008ce <uECC_vli_isZero>:
                                         wordcount_t num_words) {
 80008ce:	b510      	push	{r4, lr}
  for (i = 0; i < num_words; ++i) {
 80008d0:	2300      	movs	r3, #0
  uECC_word_t bits = 0;
 80008d2:	461a      	mov	r2, r3
  for (i = 0; i < num_words; ++i) {
 80008d4:	b25c      	sxtb	r4, r3
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	dc03      	bgt.n	80008e2 <uECC_vli_isZero+0x14>
}
 80008da:	fab2 f082 	clz	r0, r2
 80008de:	0940      	lsrs	r0, r0, #5
 80008e0:	bd10      	pop	{r4, pc}
    bits |= vli[i];
 80008e2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4322      	orrs	r2, r4
  for (i = 0; i < num_words; ++i) {
 80008ea:	e7f3      	b.n	80008d4 <uECC_vli_isZero+0x6>

080008ec <uECC_vli_testBit>:
  uECC_word_t word = vli[idx]; 
 80008ec:	114a      	asrs	r2, r1, #5
  uECC_word_t mask = (uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK);
 80008ee:	2301      	movs	r3, #1
  return word & mask;
 80008f0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  uECC_word_t mask = (uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK);
 80008f4:	f001 011f 	and.w	r1, r1, #31
 80008f8:	fa03 f101 	lsl.w	r1, r3, r1
}
 80008fc:	4008      	ands	r0, r1
 80008fe:	4770      	bx	lr

08000900 <regularize_k>:
  trigger_low();
  uECC_vli_set(result, R, uECC_MAX_WORDS*2);
}

static uECC_word_t regularize_k(const uECC_word_t *const k, uECC_word_t *k0,
                                uECC_word_t *k1, uECC_Curve curve) {
 8000900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8000904:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8000908:	f119 081f 	adds.w	r8, r9, #31
                                uECC_word_t *k1, uECC_Curve curve) {
 800090c:	461d      	mov	r5, r3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800090e:	bf48      	it	mi
 8000910:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
                                uECC_word_t *k1, uECC_Curve curve) {
 8000914:	460e      	mov	r6, r1
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8000916:	f348 1847 	sbfx	r8, r8, #5, #8
  bitcount_t num_n_bits = curve->num_n_bits;
  uECC_word_t carry =
      uECC_vli_add(k0, k, curve->n, num_n_words) ||
 800091a:	3524      	adds	r5, #36	; 0x24
 800091c:	4601      	mov	r1, r0
                                uECC_word_t *k1, uECC_Curve curve) {
 800091e:	4617      	mov	r7, r2
      uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8000920:	4643      	mov	r3, r8
 8000922:	462a      	mov	r2, r5
 8000924:	4630      	mov	r0, r6
 8000926:	f7ff fe77 	bl	8000618 <uECC_vli_add>
 800092a:	4604      	mov	r4, r0
 800092c:	b990      	cbnz	r0, 8000954 <regularize_k+0x54>
 800092e:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
 8000932:	da06      	bge.n	8000942 <regularize_k+0x42>
      (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
       uECC_vli_testBit(k0, num_n_bits));
 8000934:	4649      	mov	r1, r9
 8000936:	4630      	mov	r0, r6
 8000938:	f7ff ffd8 	bl	80008ec <uECC_vli_testBit>
      (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 800093c:	1e04      	subs	r4, r0, #0
 800093e:	bf18      	it	ne
 8000940:	2401      	movne	r4, #1
  uECC_vli_add(k1, k0, curve->n, num_n_words);
 8000942:	4643      	mov	r3, r8
 8000944:	462a      	mov	r2, r5
 8000946:	4631      	mov	r1, r6
 8000948:	4638      	mov	r0, r7
 800094a:	f7ff fe65 	bl	8000618 <uECC_vli_add>
  return carry;
}
 800094e:	4620      	mov	r0, r4
 8000950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8000954:	2401      	movs	r4, #1
 8000956:	e7f4      	b.n	8000942 <regularize_k+0x42>

08000958 <uECC_vli_numBits>:
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8000958:	3901      	subs	r1, #1
                                         const wordcount_t max_words) {
 800095a:	b510      	push	{r4, lr}
 800095c:	4602      	mov	r2, r0
 800095e:	b249      	sxtb	r1, r1
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8000960:	1d04      	adds	r4, r0, #4
 8000962:	0608      	lsls	r0, r1, #24
 8000964:	b2cb      	uxtb	r3, r1
 8000966:	d404      	bmi.n	8000972 <uECC_vli_numBits+0x1a>
 8000968:	3901      	subs	r1, #1
 800096a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800096e:	2800      	cmp	r0, #0
 8000970:	d0f7      	beq.n	8000962 <uECC_vli_numBits+0xa>
  return (i + 1);
 8000972:	3301      	adds	r3, #1
 8000974:	b258      	sxtb	r0, r3
  if (num_digits == 0) {
 8000976:	b150      	cbz	r0, 800098e <uECC_vli_numBits+0x36>
  digit = vli[num_digits - 1];
 8000978:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800097c:	3b01      	subs	r3, #1
 800097e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  for (i = 0; digit; ++i) {
 8000982:	2300      	movs	r3, #0
 8000984:	b922      	cbnz	r2, 8000990 <uECC_vli_numBits+0x38>
  return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8000986:	3801      	subs	r0, #1
 8000988:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800098c:	b200      	sxth	r0, r0
}
 800098e:	bd10      	pop	{r4, pc}
    digit >>= 1;
 8000990:	0852      	lsrs	r2, r2, #1
  for (i = 0; digit; ++i) {
 8000992:	3301      	adds	r3, #1
 8000994:	e7f6      	b.n	8000984 <uECC_vli_numBits+0x2c>

08000996 <uECC_vli_set>:
                               wordcount_t num_words) {
 8000996:	b510      	push	{r4, lr}
  for (i = 0; i < num_words; ++i) {
 8000998:	2300      	movs	r3, #0
 800099a:	b25c      	sxtb	r4, r3
 800099c:	42a2      	cmp	r2, r4
 800099e:	dc00      	bgt.n	80009a2 <uECC_vli_set+0xc>
}
 80009a0:	bd10      	pop	{r4, pc}
    dest[i] = src[i];
 80009a2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80009a6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (i = 0; i < num_words; ++i) {
 80009aa:	3301      	adds	r3, #1
 80009ac:	e7f5      	b.n	800099a <uECC_vli_set+0x4>
 80009ae:	0000      	movs	r0, r0

080009b0 <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 80009b2:	2208      	movs	r2, #8
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 80009b4:	b089      	sub	sp, #36	; 0x24
    uECC_vli_set(result, product, num_words_secp256r1);
 80009b6:	f7ff ffee 	bl	8000996 <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
 80009ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80009bc:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
 80009be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80009c0:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
 80009c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80009c4:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
 80009c6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80009c8:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 80009ca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80009cc:	9307      	str	r3, [sp, #28]
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 80009ce:	460c      	mov	r4, r1
 80009d0:	4606      	mov	r6, r0
    tmp[0] = tmp[1] = tmp[2] = 0;
 80009d2:	2700      	movs	r7, #0
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80009d4:	4613      	mov	r3, r2
 80009d6:	4669      	mov	r1, sp
 80009d8:	466a      	mov	r2, sp
 80009da:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
 80009dc:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80009e0:	9700      	str	r7, [sp, #0]
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80009e2:	f7ff fe19 	bl	8000618 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80009e6:	2308      	movs	r3, #8
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80009e8:	4605      	mov	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80009ea:	466a      	mov	r2, sp
 80009ec:	4631      	mov	r1, r6
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff fe12 	bl	8000618 <uECC_vli_add>
    
    /* s2 */
    tmp[3] = product[12];
 80009f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009f6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
 80009f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009fa:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
 80009fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009fe:	9305      	str	r3, [sp, #20]
    tmp[6] = product[15];
 8000a00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a02:	4405      	add	r5, r0
    tmp[7] = 0;
 8000a04:	e9cd 3706 	strd	r3, r7, [sp, #24]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8000a08:	466a      	mov	r2, sp
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	4669      	mov	r1, sp
 8000a0e:	4668      	mov	r0, sp
 8000a10:	f7ff fe02 	bl	8000618 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a14:	2308      	movs	r3, #8
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8000a16:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a18:	466a      	mov	r2, sp
 8000a1a:	4631      	mov	r1, r6
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	f7ff fdfb 	bl	8000618 <uECC_vli_add>
    
    /* s3 */
    tmp[0] = product[8];
 8000a22:	6a23      	ldr	r3, [r4, #32]
 8000a24:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
 8000a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a28:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
 8000a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a2c:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
 8000a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a30:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 8000a32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a34:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a36:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a38:	2308      	movs	r3, #8
 8000a3a:	466a      	mov	r2, sp
 8000a3c:	4631      	mov	r1, r6
 8000a3e:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 8000a40:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8000a44:	9703      	str	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a46:	f7ff fde7 	bl	8000618 <uECC_vli_add>
    
    /* s4 */
    tmp[0] = product[9];
 8000a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a4c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[10];
 8000a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[2] = product[11];
    tmp[3] = product[13];
    tmp[4] = product[14];
 8000a50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp[1] = product[10];
 8000a52:	9301      	str	r3, [sp, #4]
    tmp[2] = product[11];
 8000a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a56:	9302      	str	r3, [sp, #8]
    tmp[4] = product[14];
 8000a58:	9204      	str	r2, [sp, #16]
    tmp[3] = product[13];
 8000a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp[5] = product[15];
 8000a5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    tmp[3] = product[13];
 8000a5e:	9303      	str	r3, [sp, #12]
    tmp[6] = product[13];
 8000a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
    tmp[7] = product[8];
 8000a64:	6a23      	ldr	r3, [r4, #32]
 8000a66:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a68:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	466a      	mov	r2, sp
 8000a6e:	4631      	mov	r1, r6
 8000a70:	4630      	mov	r0, r6
 8000a72:	f7ff fdd1 	bl	8000618 <uECC_vli_add>
    
    /* d1 */
    tmp[0] = product[11];
 8000a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a78:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
 8000a7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a7c:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
 8000a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a80:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
 8000a82:	6a23      	ldr	r3, [r4, #32]
 8000a84:	9306      	str	r3, [sp, #24]
    tmp[7] = product[10];
 8000a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a88:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000a8a:	4405      	add	r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	466a      	mov	r2, sp
 8000a90:	4631      	mov	r1, r6
 8000a92:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 8000a94:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8000a98:	9703      	str	r7, [sp, #12]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000a9a:	f7ff fde2 	bl	8000662 <uECC_vli_sub>
    
    /* d2 */
    tmp[0] = product[12];
 8000a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aa0:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
 8000aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aa4:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
 8000aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aa8:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
 8000aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000aac:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
 8000aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ab0:	9306      	str	r3, [sp, #24]
    tmp[7] = product[11];
 8000ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ab4:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000ab6:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000ab8:	2308      	movs	r3, #8
 8000aba:	466a      	mov	r2, sp
 8000abc:	4631      	mov	r1, r6
 8000abe:	4630      	mov	r0, r6
    tmp[4] = tmp[5] = 0;
 8000ac0:	e9cd 7704 	strd	r7, r7, [sp, #16]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000ac4:	f7ff fdcd 	bl	8000662 <uECC_vli_sub>
    
    /* d3 */
    tmp[0] = product[13];
 8000ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aca:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
 8000acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ace:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
 8000ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ad2:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
 8000ad4:	6a23      	ldr	r3, [r4, #32]
 8000ad6:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
 8000ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ada:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
 8000adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[6] = 0;
 8000ade:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[12];
 8000ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae4:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000ae6:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000ae8:	2308      	movs	r3, #8
 8000aea:	466a      	mov	r2, sp
 8000aec:	4631      	mov	r1, r6
 8000aee:	4630      	mov	r0, r6
 8000af0:	f7ff fdb7 	bl	8000662 <uECC_vli_sub>
    
    /* d4 */
    tmp[0] = product[14];
 8000af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000af6:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
 8000af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp[2] = 0;
 8000afa:	e9cd 3701 	strd	r3, r7, [sp, #4]
    tmp[3] = product[9];
 8000afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b00:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
 8000b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b04:	9304      	str	r3, [sp, #16]
    tmp[5] = product[11];
 8000b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    tmp[6] = 0;
 8000b08:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[13];
 8000b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b0e:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000b10:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000b12:	2308      	movs	r3, #8
 8000b14:	466a      	mov	r2, sp
 8000b16:	4631      	mov	r1, r6
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f7ff fda2 	bl	8000662 <uECC_vli_sub>
    
    if (carry < 0) {
 8000b1e:	1a2d      	subs	r5, r5, r0
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 8000b20:	4c0d      	ldr	r4, [pc, #52]	; (8000b58 <vli_mmod_fast_secp256r1+0x1a8>)
    if (carry < 0) {
 8000b22:	d40f      	bmi.n	8000b44 <vli_mmod_fast_secp256r1+0x194>
        } while (carry < 0);
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 8000b24:	b935      	cbnz	r5, 8000b34 <vli_mmod_fast_secp256r1+0x184>
 8000b26:	2208      	movs	r2, #8
 8000b28:	4631      	mov	r1, r6
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fbe6 	bl	80002fc <uECC_vli_cmp_unsafe>
 8000b30:	2801      	cmp	r0, #1
 8000b32:	d00f      	beq.n	8000b54 <vli_mmod_fast_secp256r1+0x1a4>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 8000b34:	2308      	movs	r3, #8
 8000b36:	4622      	mov	r2, r4
 8000b38:	4631      	mov	r1, r6
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f7ff fd91 	bl	8000662 <uECC_vli_sub>
 8000b40:	1a2d      	subs	r5, r5, r0
 8000b42:	e7ef      	b.n	8000b24 <vli_mmod_fast_secp256r1+0x174>
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 8000b44:	2308      	movs	r3, #8
 8000b46:	4622      	mov	r2, r4
 8000b48:	4631      	mov	r1, r6
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f7ff fd64 	bl	8000618 <uECC_vli_add>
        } while (carry < 0);
 8000b50:	182d      	adds	r5, r5, r0
 8000b52:	d4f7      	bmi.n	8000b44 <vli_mmod_fast_secp256r1+0x194>
        }
    }
}
 8000b54:	b009      	add	sp, #36	; 0x24
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	08002b90 	.word	0x08002b90

08000b5c <uECC_vli_equal>:
                                        wordcount_t num_words) {
 8000b5c:	b530      	push	{r4, r5, lr}
  for (i = num_words - 1; i >= 0; --i) {
 8000b5e:	3a01      	subs	r2, #1
 8000b60:	b252      	sxtb	r2, r2
  uECC_word_t diff = 0;
 8000b62:	2300      	movs	r3, #0
  for (i = num_words - 1; i >= 0; --i) {
 8000b64:	0614      	lsls	r4, r2, #24
 8000b66:	d503      	bpl.n	8000b70 <uECC_vli_equal+0x14>
}
 8000b68:	fab3 f083 	clz	r0, r3
 8000b6c:	0940      	lsrs	r0, r0, #5
 8000b6e:	bd30      	pop	{r4, r5, pc}
    diff |= (left[i] ^ right[i]);
 8000b70:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000b74:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8000b78:	406c      	eors	r4, r5
 8000b7a:	4323      	orrs	r3, r4
  for (i = num_words - 1; i >= 0; --i) {
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	e7f1      	b.n	8000b64 <uECC_vli_equal+0x8>

08000b80 <uECC_vli_cmp>:
                                      wordcount_t num_words) {
 8000b80:	b530      	push	{r4, r5, lr}
 8000b82:	b089      	sub	sp, #36	; 0x24
  uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8000b84:	4613      	mov	r3, r2
                                      wordcount_t num_words) {
 8000b86:	4615      	mov	r5, r2
  uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8000b88:	460a      	mov	r2, r1
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	4668      	mov	r0, sp
 8000b8e:	f7ff fd68 	bl	8000662 <uECC_vli_sub>
  uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8000b92:	4629      	mov	r1, r5
  uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8000b94:	4604      	mov	r4, r0
  uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8000b96:	4668      	mov	r0, sp
 8000b98:	f7ff fe99 	bl	80008ce <uECC_vli_isZero>
  uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8000b9c:	3c00      	subs	r4, #0
 8000b9e:	bf18      	it	ne
 8000ba0:	2401      	movne	r4, #1
  return (!equal - 2 * neg);
 8000ba2:	0064      	lsls	r4, r4, #1
}
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	4260      	negne	r0, r4
 8000baa:	f1c4 0001 	rsbeq	r0, r4, #1
 8000bae:	b009      	add	sp, #36	; 0x24
 8000bb0:	bd30      	pop	{r4, r5, pc}

08000bb2 <uECC_vli_rshift1>:
  vli += num_words;
 8000bb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  uECC_word_t carry = 0;
 8000bb6:	2300      	movs	r3, #0
  while (vli-- > end) {
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	d300      	bcc.n	8000bbe <uECC_vli_rshift1+0xc>
}
 8000bbc:	4770      	bx	lr
    uECC_word_t temp = *vli;
 8000bbe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    *vli = (temp >> 1) | carry;
 8000bc2:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8000bc6:	600b      	str	r3, [r1, #0]
    carry = temp << (uECC_WORD_BITS - 1);
 8000bc8:	07d3      	lsls	r3, r2, #31
 8000bca:	e7f5      	b.n	8000bb8 <uECC_vli_rshift1+0x6>

08000bcc <vli_modInv_update>:
  if (!EVEN(uv)) {
 8000bcc:	6803      	ldr	r3, [r0, #0]
                              wordcount_t num_words) {
 8000bce:	b570      	push	{r4, r5, r6, lr}
  if (!EVEN(uv)) {
 8000bd0:	f013 0601 	ands.w	r6, r3, #1
                              wordcount_t num_words) {
 8000bd4:	4605      	mov	r5, r0
 8000bd6:	4614      	mov	r4, r2
  if (!EVEN(uv)) {
 8000bd8:	d005      	beq.n	8000be6 <vli_modInv_update+0x1a>
    carry = uECC_vli_add(uv, uv, mod, num_words);
 8000bda:	4613      	mov	r3, r2
 8000bdc:	460a      	mov	r2, r1
 8000bde:	4601      	mov	r1, r0
 8000be0:	f7ff fd1a 	bl	8000618 <uECC_vli_add>
 8000be4:	4606      	mov	r6, r0
  uECC_vli_rshift1(uv, num_words);
 8000be6:	4621      	mov	r1, r4
 8000be8:	4628      	mov	r0, r5
 8000bea:	f7ff ffe2 	bl	8000bb2 <uECC_vli_rshift1>
  if (carry) {
 8000bee:	b146      	cbz	r6, 8000c02 <vli_modInv_update+0x36>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8000bf0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
 8000c02:	bd70      	pop	{r4, r5, r6, pc}

08000c04 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	f99d 6010 	ldrsb.w	r6, [sp, #16]
 8000c0a:	461d      	mov	r5, r3
  uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8000c0c:	4633      	mov	r3, r6
                                  wordcount_t num_words) {
 8000c0e:	4604      	mov	r4, r0
  uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8000c10:	f7ff fd02 	bl	8000618 <uECC_vli_add>
  if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8000c14:	b930      	cbnz	r0, 8000c24 <uECC_vli_modAdd+0x20>
 8000c16:	4632      	mov	r2, r6
 8000c18:	4621      	mov	r1, r4
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f7ff fb6e 	bl	80002fc <uECC_vli_cmp_unsafe>
 8000c20:	2801      	cmp	r0, #1
 8000c22:	d007      	beq.n	8000c34 <uECC_vli_modAdd+0x30>
    uECC_vli_sub(result, result, mod, num_words);
 8000c24:	4633      	mov	r3, r6
 8000c26:	462a      	mov	r2, r5
 8000c28:	4621      	mov	r1, r4
 8000c2a:	4620      	mov	r0, r4
}
 8000c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uECC_vli_sub(result, result, mod, num_words);
 8000c30:	f7ff bd17 	b.w	8000662 <uECC_vli_sub>
}
 8000c34:	bd70      	pop	{r4, r5, r6, pc}

08000c36 <uECC_vli_modSub>:
                                  wordcount_t num_words) {
 8000c36:	b570      	push	{r4, r5, r6, lr}
 8000c38:	f99d 6010 	ldrsb.w	r6, [sp, #16]
 8000c3c:	461d      	mov	r5, r3
  uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8000c3e:	4633      	mov	r3, r6
                                  wordcount_t num_words) {
 8000c40:	4604      	mov	r4, r0
  uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8000c42:	f7ff fd0e 	bl	8000662 <uECC_vli_sub>
  if (l_borrow) {
 8000c46:	b138      	cbz	r0, 8000c58 <uECC_vli_modSub+0x22>
    uECC_vli_add(result, result, mod, num_words);
 8000c48:	4633      	mov	r3, r6
 8000c4a:	462a      	mov	r2, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	4620      	mov	r0, r4
}
 8000c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uECC_vli_add(result, result, mod, num_words);
 8000c54:	f7ff bce0 	b.w	8000618 <uECC_vli_add>
}
 8000c58:	bd70      	pop	{r4, r5, r6, pc}

08000c5a <uECC_vli_mmod>:
                                const uECC_word_t *mod, wordcount_t num_words) {
 8000c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c5e:	b0a5      	sub	sp, #148	; 0x94
 8000c60:	461d      	mov	r5, r3
  uECC_word_t *v[2] = {tmp, product};
 8000c62:	ab14      	add	r3, sp, #80	; 0x50
 8000c64:	e9cd 3102 	strd	r3, r1, [sp, #8]
                                const uECC_word_t *mod, wordcount_t num_words) {
 8000c68:	4680      	mov	r8, r0
      (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	4610      	mov	r0, r2
                                const uECC_word_t *mod, wordcount_t num_words) {
 8000c6e:	4617      	mov	r7, r2
      (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 8000c70:	f7ff fe72 	bl	8000958 <uECC_vli_numBits>
 8000c74:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
  bitcount_t shift =
 8000c78:	b224      	sxth	r4, r4
  wordcount_t word_shift = shift / uECC_WORD_BITS;
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	4626      	mov	r6, r4
 8000c7e:	bfb8      	it	lt
 8000c80:	f104 061f 	addlt.w	r6, r4, #31
  wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8000c84:	4263      	negs	r3, r4
  wordcount_t word_shift = shift / uECC_WORD_BITS;
 8000c86:	f346 1647 	sbfx	r6, r6, #5, #8
  wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	f004 091f 	and.w	r9, r4, #31
  uECC_vli_clear(mod_multiple, word_shift);
 8000c92:	4631      	mov	r1, r6
  wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8000c94:	bf58      	it	pl
 8000c96:	f1c3 0900 	rsbpl	r9, r3, #0
  uECC_vli_clear(mod_multiple, word_shift);
 8000c9a:	a804      	add	r0, sp, #16
 8000c9c:	f7ff fe11 	bl	80008c2 <uECC_vli_clear>
  if (bit_shift > 0) {
 8000ca0:	f1b9 0f00 	cmp.w	r9, #0
 8000ca4:	b236      	sxth	r6, r6
 8000ca6:	dd2b      	ble.n	8000d00 <uECC_vli_mmod+0xa6>
 8000ca8:	ab04      	add	r3, sp, #16
  uECC_word_t carry = 0;
 8000caa:	2200      	movs	r2, #0
 8000cac:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8000cb0:	f1c9 0c20 	rsb	ip, r9, #32
    for (index = 0; index < (uECC_word_t)num_words; ++index) {
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	429d      	cmp	r5, r3
 8000cb8:	d817      	bhi.n	8000cea <uECC_vli_mmod+0x90>
    for (i = 0; i < num_words * 2; ++i) {
 8000cba:	006b      	lsls	r3, r5, #1
 8000cbc:	9301      	str	r3, [sp, #4]
    uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8000cbe:	ab04      	add	r3, sp, #16
 8000cc0:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8000cc4:	1e6f      	subs	r7, r5, #1
 8000cc6:	ab24      	add	r3, sp, #144	; 0x90
    uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8000cc8:	2601      	movs	r6, #1
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8000cca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
  for (index = 1; shift >= 0; --shift) {
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	da54      	bge.n	8000d7c <uECC_vli_mmod+0x122>
  uECC_vli_set(result, v[index], num_words);
 8000cd2:	ab24      	add	r3, sp, #144	; 0x90
 8000cd4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000cd8:	462a      	mov	r2, r5
 8000cda:	f856 1c88 	ldr.w	r1, [r6, #-136]
 8000cde:	4640      	mov	r0, r8
 8000ce0:	f7ff fe59 	bl	8000996 <uECC_vli_set>
}
 8000ce4:	b025      	add	sp, #148	; 0x94
 8000ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 8000cea:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8000cee:	fa00 f109 	lsl.w	r1, r0, r9
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	f846 2b04 	str.w	r2, [r6], #4
    for (index = 0; index < (uECC_word_t)num_words; ++index) {
 8000cf8:	3301      	adds	r3, #1
      carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8000cfa:	fa20 f20c 	lsr.w	r2, r0, ip
    for (index = 0; index < (uECC_word_t)num_words; ++index) {
 8000cfe:	e7da      	b.n	8000cb6 <uECC_vli_mmod+0x5c>
    uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 8000d00:	ab04      	add	r3, sp, #16
 8000d02:	462a      	mov	r2, r5
 8000d04:	4639      	mov	r1, r7
 8000d06:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8000d0a:	f7ff fe44 	bl	8000996 <uECC_vli_set>
 8000d0e:	e7d4      	b.n	8000cba <uECC_vli_mmod+0x60>
      uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8000d10:	fa0f fe82 	sxth.w	lr, r2
 8000d14:	f85a 3c88 	ldr.w	r3, [sl, #-136]
 8000d18:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
 8000d1c:	ab24      	add	r3, sp, #144	; 0x90
 8000d1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000d22:	3001      	adds	r0, #1
 8000d24:	f852 3c80 	ldr.w	r3, [r2, #-128]
 8000d28:	440b      	add	r3, r1
 8000d2a:	ebbb 0303 	subs.w	r3, fp, r3
 8000d2e:	bf34      	ite	cc
 8000d30:	2201      	movcc	r2, #1
 8000d32:	2200      	movcs	r2, #0
      if (diff != v[index][i]) {
 8000d34:	459b      	cmp	fp, r3
        borrow = (diff > v[index][i]);
 8000d36:	bf18      	it	ne
 8000d38:	4611      	movne	r1, r2
      v[1 - index][i] = diff;
 8000d3a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
 8000d3e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
    for (i = 0; i < num_words * 2; ++i) {
 8000d42:	9b01      	ldr	r3, [sp, #4]
 8000d44:	b242      	sxtb	r2, r0
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbe2      	blt.n	8000d10 <uECC_vli_mmod+0xb6>
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8000d4a:	1a73      	subs	r3, r6, r1
 8000d4c:	425e      	negs	r6, r3
    uECC_vli_rshift1(mod_multiple, num_words);
 8000d4e:	4629      	mov	r1, r5
 8000d50:	a804      	add	r0, sp, #16
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8000d52:	415e      	adcs	r6, r3
    uECC_vli_rshift1(mod_multiple, num_words);
 8000d54:	f7ff ff2d 	bl	8000bb2 <uECC_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8000d58:	ab24      	add	r3, sp, #144	; 0x90
 8000d5a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8000d5e:	4629      	mov	r1, r5
                                   << (uECC_WORD_BITS - 1);
 8000d60:	f853 2c80 	ldr.w	r2, [r3, #-128]
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8000d64:	f857 3c80 	ldr.w	r3, [r7, #-128]
 8000d68:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8000d6c:	f847 3c80 	str.w	r3, [r7, #-128]
    uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8000d70:	4648      	mov	r0, r9
 8000d72:	3c01      	subs	r4, #1
 8000d74:	f7ff ff1d 	bl	8000bb2 <uECC_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8000d78:	b224      	sxth	r4, r4
 8000d7a:	e7a8      	b.n	8000cce <uECC_vli_mmod+0x74>
      uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8000d7c:	ab24      	add	r3, sp, #144	; 0x90
 8000d7e:	2000      	movs	r0, #0
      v[1 - index][i] = diff;
 8000d80:	f1c6 0c01 	rsb	ip, r6, #1
    uECC_word_t borrow = 0;
 8000d84:	4601      	mov	r1, r0
      uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8000d86:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
      v[1 - index][i] = diff;
 8000d8a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000d8e:	e7d8      	b.n	8000d42 <uECC_vli_mmod+0xe8>

08000d90 <uECC_vli_modMult>:
                                   wordcount_t num_words) {
 8000d90:	b530      	push	{r4, r5, lr}
 8000d92:	b091      	sub	sp, #68	; 0x44
 8000d94:	4604      	mov	r4, r0
 8000d96:	461d      	mov	r5, r3
  uECC_vli_mult(product, left, right, num_words);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
 8000d9e:	f7ff fc87 	bl	80006b0 <uECC_vli_mult>
  uECC_vli_mmod(result, product, mod, num_words);
 8000da2:	462a      	mov	r2, r5
 8000da4:	4669      	mov	r1, sp
 8000da6:	4620      	mov	r0, r4
 8000da8:	f7ff ff57 	bl	8000c5a <uECC_vli_mmod>
}
 8000dac:	b011      	add	sp, #68	; 0x44
 8000dae:	bd30      	pop	{r4, r5, pc}

08000db0 <uECC_vli_modMult_fast>:
                                        uECC_Curve curve) {
 8000db0:	b530      	push	{r4, r5, lr}
 8000db2:	461c      	mov	r4, r3
 8000db4:	b091      	sub	sp, #68	; 0x44
 8000db6:	4605      	mov	r5, r0
  uECC_vli_mult(product, left, right, curve->num_words);
 8000db8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dbc:	4668      	mov	r0, sp
 8000dbe:	f7ff fc77 	bl	80006b0 <uECC_vli_mult>
  curve->mmod_fast(result, product);
 8000dc2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8000dc6:	4669      	mov	r1, sp
 8000dc8:	4628      	mov	r0, r5
 8000dca:	4798      	blx	r3
}
 8000dcc:	b011      	add	sp, #68	; 0x44
 8000dce:	bd30      	pop	{r4, r5, pc}

08000dd0 <uECC_vli_modSquare_fast>:
                                          uECC_Curve curve) {
 8000dd0:	4613      	mov	r3, r2
  uECC_vli_modMult_fast(result, left, left, curve);
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	f7ff bfec 	b.w	8000db0 <uECC_vli_modMult_fast>

08000dd8 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 8000dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ddc:	4615      	mov	r5, r2
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	4604      	mov	r4, r0
 8000de2:	460e      	mov	r6, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000de4:	221c      	movs	r2, #28
 8000de6:	2100      	movs	r1, #0
 8000de8:	a803      	add	r0, sp, #12
 8000dea:	f7ff fa35 	bl	8000258 <memset>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000dee:	1d2f      	adds	r7, r5, #4
    wordcount_t num_words = curve->num_words;
 8000df0:	f995 8000 	ldrsb.w	r8, [r5]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000df4:	2303      	movs	r3, #3
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000df6:	462a      	mov	r2, r5
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4620      	mov	r0, r4
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000dfc:	9302      	str	r3, [sp, #8]
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000dfe:	f7ff ffe7 	bl	8000dd0 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000e02:	463b      	mov	r3, r7
 8000e04:	aa02      	add	r2, sp, #8
 8000e06:	4621      	mov	r1, r4
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f8cd 8000 	str.w	r8, [sp]
 8000e0e:	f7ff ff12 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 8000e12:	462b      	mov	r3, r5
 8000e14:	4632      	mov	r2, r6
 8000e16:	4621      	mov	r1, r4
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff ffc9 	bl	8000db0 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 8000e1e:	f8cd 8000 	str.w	r8, [sp]
 8000e22:	463b      	mov	r3, r7
 8000e24:	f105 0284 	add.w	r2, r5, #132	; 0x84
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff feea 	bl	8000c04 <uECC_vli_modAdd>
}
 8000e30:	b00a      	add	sp, #40	; 0x28
 8000e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e36 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e38:	b091      	sub	sp, #68	; 0x44
 8000e3a:	460d      	mov	r5, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000e3c:	221c      	movs	r2, #28
 8000e3e:	2100      	movs	r1, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000e40:	4606      	mov	r6, r0
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000e42:	a801      	add	r0, sp, #4
 8000e44:	f7ff fa08 	bl	8000258 <memset>
 8000e48:	2401      	movs	r4, #1
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000e4a:	221c      	movs	r2, #28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	a809      	add	r0, sp, #36	; 0x24
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000e50:	9400      	str	r4, [sp, #0]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000e52:	f7ff fa01 	bl	8000258 <memset>
    wordcount_t num_words = curve->num_words;
 8000e56:	4629      	mov	r1, r5
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000e58:	466a      	mov	r2, sp
    wordcount_t num_words = curve->num_words;
 8000e5a:	f911 7b04 	ldrsb.w	r7, [r1], #4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000e5e:	9408      	str	r4, [sp, #32]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000e60:	463b      	mov	r3, r7
 8000e62:	4668      	mov	r0, sp
 8000e64:	f7ff fbd8 	bl	8000618 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8000e68:	4639      	mov	r1, r7
 8000e6a:	4668      	mov	r0, sp
 8000e6c:	f7ff fd74 	bl	8000958 <uECC_vli_numBits>
 8000e70:	1e44      	subs	r4, r0, #1
 8000e72:	b224      	sxth	r4, r4
 8000e74:	2c01      	cmp	r4, #1
 8000e76:	dc06      	bgt.n	8000e86 <mod_sqrt_default+0x50>
    uECC_vli_set(a, l_result, num_words);
 8000e78:	463a      	mov	r2, r7
 8000e7a:	a908      	add	r1, sp, #32
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f7ff fd8a 	bl	8000996 <uECC_vli_set>
}
 8000e82:	b011      	add	sp, #68	; 0x44
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8000e86:	a908      	add	r1, sp, #32
 8000e88:	4608      	mov	r0, r1
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	f7ff ffa0 	bl	8000dd0 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8000e90:	4621      	mov	r1, r4
 8000e92:	4668      	mov	r0, sp
 8000e94:	f7ff fd2a 	bl	80008ec <uECC_vli_testBit>
 8000e98:	b128      	cbz	r0, 8000ea6 <mod_sqrt_default+0x70>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8000e9a:	a908      	add	r1, sp, #32
 8000e9c:	462b      	mov	r3, r5
 8000e9e:	4632      	mov	r2, r6
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	f7ff ff85 	bl	8000db0 <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8000ea6:	3c01      	subs	r4, #1
 8000ea8:	e7e3      	b.n	8000e72 <mod_sqrt_default+0x3c>

08000eaa <double_jacobian_default>:
                                    uECC_Curve curve) {
 8000eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    wordcount_t num_words = curve->num_words;
 8000eae:	f993 6000 	ldrsb.w	r6, [r3]
                                    uECC_Curve curve) {
 8000eb2:	b092      	sub	sp, #72	; 0x48
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	4689      	mov	r9, r1
    if (uECC_vli_isZero(Z1, num_words)) {
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4631      	mov	r1, r6
                                    uECC_Curve curve) {
 8000ebc:	4615      	mov	r5, r2
 8000ebe:	461f      	mov	r7, r3
    if (uECC_vli_isZero(Z1, num_words)) {
 8000ec0:	f7ff fd05 	bl	80008ce <uECC_vli_isZero>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	f040 8091 	bne.w	8000fec <double_jacobian_default+0x142>
    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8000eca:	463a      	mov	r2, r7
 8000ecc:	4649      	mov	r1, r9
 8000ece:	a802      	add	r0, sp, #8
 8000ed0:	f7ff ff7e 	bl	8000dd0 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	aa02      	add	r2, sp, #8
 8000ed8:	4621      	mov	r1, r4
 8000eda:	a80a      	add	r0, sp, #40	; 0x28
 8000edc:	f7ff ff68 	bl	8000db0 <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8000ee0:	a902      	add	r1, sp, #8
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	463a      	mov	r2, r7
 8000ee6:	f7ff ff73 	bl	8000dd0 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8000eea:	463b      	mov	r3, r7
 8000eec:	462a      	mov	r2, r5
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4648      	mov	r0, r9
 8000ef2:	f7ff ff5d 	bl	8000db0 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000ef6:	f107 0804 	add.w	r8, r7, #4
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8000efa:	463a      	mov	r2, r7
 8000efc:	4629      	mov	r1, r5
 8000efe:	4628      	mov	r0, r5
 8000f00:	f7ff ff66 	bl	8000dd0 <uECC_vli_modSquare_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000f04:	4643      	mov	r3, r8
 8000f06:	462a      	mov	r2, r5
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	9600      	str	r6, [sp, #0]
 8000f0e:	f7ff fe79 	bl	8000c04 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8000f12:	4643      	mov	r3, r8
 8000f14:	462a      	mov	r2, r5
 8000f16:	4629      	mov	r1, r5
 8000f18:	4628      	mov	r0, r5
 8000f1a:	9600      	str	r6, [sp, #0]
 8000f1c:	f7ff fe72 	bl	8000c04 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8000f20:	4643      	mov	r3, r8
 8000f22:	462a      	mov	r2, r5
 8000f24:	4621      	mov	r1, r4
 8000f26:	4628      	mov	r0, r5
 8000f28:	9600      	str	r6, [sp, #0]
 8000f2a:	f7ff fe84 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 8000f2e:	463b      	mov	r3, r7
 8000f30:	462a      	mov	r2, r5
 8000f32:	4621      	mov	r1, r4
 8000f34:	4620      	mov	r0, r4
 8000f36:	f7ff ff3b 	bl	8000db0 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4628      	mov	r0, r5
 8000f42:	9600      	str	r6, [sp, #0]
 8000f44:	f7ff fe5e 	bl	8000c04 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 8000f48:	4643      	mov	r3, r8
 8000f4a:	9600      	str	r6, [sp, #0]
 8000f4c:	462a      	mov	r2, r5
 8000f4e:	4621      	mov	r1, r4
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff fe57 	bl	8000c04 <uECC_vli_modAdd>
  return word & mask;
 8000f56:	6823      	ldr	r3, [r4, #0]
    if (uECC_vli_testBit(X1, 0)) {
 8000f58:	07db      	lsls	r3, r3, #31
 8000f5a:	d54a      	bpl.n	8000ff2 <double_jacobian_default+0x148>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000f5c:	4633      	mov	r3, r6
 8000f5e:	4642      	mov	r2, r8
 8000f60:	4621      	mov	r1, r4
 8000f62:	4620      	mov	r0, r4
 8000f64:	f7ff fb58 	bl	8000618 <uECC_vli_add>
        uECC_vli_rshift1(X1, num_words);
 8000f68:	4631      	mov	r1, r6
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000f6a:	4682      	mov	sl, r0
        uECC_vli_rshift1(X1, num_words);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fe20 	bl	8000bb2 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 8000f72:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000f7c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
 8000f80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 8000f84:	463a      	mov	r2, r7
 8000f86:	4621      	mov	r1, r4
 8000f88:	4628      	mov	r0, r5
 8000f8a:	f7ff ff21 	bl	8000dd0 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8000f8e:	4643      	mov	r3, r8
 8000f90:	aa0a      	add	r2, sp, #40	; 0x28
 8000f92:	4629      	mov	r1, r5
 8000f94:	4628      	mov	r0, r5
 8000f96:	9600      	str	r6, [sp, #0]
 8000f98:	f7ff fe4d 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	aa0a      	add	r2, sp, #40	; 0x28
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	9600      	str	r6, [sp, #0]
 8000fa6:	f7ff fe46 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8000faa:	a90a      	add	r1, sp, #40	; 0x28
 8000fac:	4608      	mov	r0, r1
 8000fae:	4643      	mov	r3, r8
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	9600      	str	r6, [sp, #0]
 8000fb4:	f7ff fe3f 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 8000fb8:	463b      	mov	r3, r7
 8000fba:	aa0a      	add	r2, sp, #40	; 0x28
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fef6 	bl	8000db0 <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 8000fc4:	aa02      	add	r2, sp, #8
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4621      	mov	r1, r4
 8000fcc:	9600      	str	r6, [sp, #0]
 8000fce:	f7ff fe32 	bl	8000c36 <uECC_vli_modSub>
    uECC_vli_set(X1, Z1, num_words);
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff fcdd 	bl	8000996 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 8000fdc:	4649      	mov	r1, r9
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f7ff fcd9 	bl	8000996 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 8000fe4:	a902      	add	r1, sp, #8
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	f7ff fcd5 	bl	8000996 <uECC_vli_set>
}
 8000fec:	b012      	add	sp, #72	; 0x48
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uECC_vli_rshift1(X1, num_words);
 8000ff2:	4631      	mov	r1, r6
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f7ff fddc 	bl	8000bb2 <uECC_vli_rshift1>
 8000ffa:	e7c3      	b.n	8000f84 <double_jacobian_default+0xda>

08000ffc <uECC_vli_modInv>:
                                  wordcount_t num_words) {
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	460f      	mov	r7, r1
 8001000:	b0a1      	sub	sp, #132	; 0x84
 8001002:	4606      	mov	r6, r0
  if (uECC_vli_isZero(input, num_words)) {
 8001004:	4619      	mov	r1, r3
 8001006:	4638      	mov	r0, r7
                                  wordcount_t num_words) {
 8001008:	4615      	mov	r5, r2
 800100a:	461c      	mov	r4, r3
  if (uECC_vli_isZero(input, num_words)) {
 800100c:	f7ff fc5f 	bl	80008ce <uECC_vli_isZero>
 8001010:	b128      	cbz	r0, 800101e <uECC_vli_modInv+0x22>
    uECC_vli_clear(result, num_words);
 8001012:	4630      	mov	r0, r6
}
 8001014:	b021      	add	sp, #132	; 0x84
 8001016:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    uECC_vli_clear(result, num_words);
 800101a:	f7ff bc52 	b.w	80008c2 <uECC_vli_clear>
  uECC_vli_set(a, input, num_words);
 800101e:	4622      	mov	r2, r4
 8001020:	4639      	mov	r1, r7
 8001022:	4668      	mov	r0, sp
 8001024:	f7ff fcb7 	bl	8000996 <uECC_vli_set>
  uECC_vli_set(b, mod, num_words);
 8001028:	4629      	mov	r1, r5
 800102a:	a808      	add	r0, sp, #32
 800102c:	f7ff fcb3 	bl	8000996 <uECC_vli_set>
  uECC_vli_clear(u, num_words);
 8001030:	4621      	mov	r1, r4
 8001032:	a810      	add	r0, sp, #64	; 0x40
 8001034:	f7ff fc45 	bl	80008c2 <uECC_vli_clear>
  u[0] = 1;
 8001038:	2301      	movs	r3, #1
  uECC_vli_clear(v, num_words);
 800103a:	4621      	mov	r1, r4
 800103c:	a818      	add	r0, sp, #96	; 0x60
  u[0] = 1;
 800103e:	9310      	str	r3, [sp, #64]	; 0x40
  uECC_vli_clear(v, num_words);
 8001040:	f7ff fc3f 	bl	80008c2 <uECC_vli_clear>
  while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8001044:	4622      	mov	r2, r4
 8001046:	a908      	add	r1, sp, #32
 8001048:	4668      	mov	r0, sp
 800104a:	f7ff f957 	bl	80002fc <uECC_vli_cmp_unsafe>
 800104e:	b930      	cbnz	r0, 800105e <uECC_vli_modInv+0x62>
  uECC_vli_set(result, u, num_words);
 8001050:	4622      	mov	r2, r4
 8001052:	a910      	add	r1, sp, #64	; 0x40
 8001054:	4630      	mov	r0, r6
 8001056:	f7ff fc9e 	bl	8000996 <uECC_vli_set>
}
 800105a:	b021      	add	sp, #132	; 0x84
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (EVEN(a)) {
 800105e:	9b00      	ldr	r3, [sp, #0]
 8001060:	07da      	lsls	r2, r3, #31
 8001062:	d409      	bmi.n	8001078 <uECC_vli_modInv+0x7c>
      uECC_vli_rshift1(a, num_words);
 8001064:	4621      	mov	r1, r4
 8001066:	4668      	mov	r0, sp
 8001068:	f7ff fda3 	bl	8000bb2 <uECC_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 800106c:	4622      	mov	r2, r4
 800106e:	4629      	mov	r1, r5
 8001070:	a810      	add	r0, sp, #64	; 0x40
      vli_modInv_update(v, mod, num_words);
 8001072:	f7ff fdab 	bl	8000bcc <vli_modInv_update>
 8001076:	e7e5      	b.n	8001044 <uECC_vli_modInv+0x48>
    } else if (EVEN(b)) {
 8001078:	9b08      	ldr	r3, [sp, #32]
 800107a:	07db      	lsls	r3, r3, #31
 800107c:	d407      	bmi.n	800108e <uECC_vli_modInv+0x92>
      uECC_vli_rshift1(b, num_words);
 800107e:	4621      	mov	r1, r4
 8001080:	a808      	add	r0, sp, #32
 8001082:	f7ff fd96 	bl	8000bb2 <uECC_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8001086:	4622      	mov	r2, r4
 8001088:	4629      	mov	r1, r5
 800108a:	a818      	add	r0, sp, #96	; 0x60
 800108c:	e7f1      	b.n	8001072 <uECC_vli_modInv+0x76>
    } else if (cmpResult > 0) {
 800108e:	2800      	cmp	r0, #0
      uECC_vli_sub(a, a, b, num_words);
 8001090:	4623      	mov	r3, r4
    } else if (cmpResult > 0) {
 8001092:	dd1c      	ble.n	80010ce <uECC_vli_modInv+0xd2>
      uECC_vli_sub(a, a, b, num_words);
 8001094:	aa08      	add	r2, sp, #32
 8001096:	4669      	mov	r1, sp
 8001098:	4668      	mov	r0, sp
 800109a:	f7ff fae2 	bl	8000662 <uECC_vli_sub>
      uECC_vli_rshift1(a, num_words);
 800109e:	4621      	mov	r1, r4
 80010a0:	4668      	mov	r0, sp
 80010a2:	f7ff fd86 	bl	8000bb2 <uECC_vli_rshift1>
      if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 80010a6:	4622      	mov	r2, r4
 80010a8:	a918      	add	r1, sp, #96	; 0x60
 80010aa:	a810      	add	r0, sp, #64	; 0x40
 80010ac:	f7ff f926 	bl	80002fc <uECC_vli_cmp_unsafe>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	da05      	bge.n	80010c0 <uECC_vli_modInv+0xc4>
        uECC_vli_add(u, u, mod, num_words);
 80010b4:	a910      	add	r1, sp, #64	; 0x40
 80010b6:	4623      	mov	r3, r4
 80010b8:	462a      	mov	r2, r5
 80010ba:	4608      	mov	r0, r1
 80010bc:	f7ff faac 	bl	8000618 <uECC_vli_add>
      uECC_vli_sub(u, u, v, num_words);
 80010c0:	a910      	add	r1, sp, #64	; 0x40
 80010c2:	4623      	mov	r3, r4
 80010c4:	aa18      	add	r2, sp, #96	; 0x60
 80010c6:	4608      	mov	r0, r1
 80010c8:	f7ff facb 	bl	8000662 <uECC_vli_sub>
 80010cc:	e7ce      	b.n	800106c <uECC_vli_modInv+0x70>
      uECC_vli_sub(b, b, a, num_words);
 80010ce:	466a      	mov	r2, sp
 80010d0:	a808      	add	r0, sp, #32
 80010d2:	f7ff fac6 	bl	8000662 <uECC_vli_sub>
      uECC_vli_rshift1(b, num_words);
 80010d6:	4621      	mov	r1, r4
 80010d8:	a808      	add	r0, sp, #32
 80010da:	f7ff fd6a 	bl	8000bb2 <uECC_vli_rshift1>
      if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 80010de:	4622      	mov	r2, r4
 80010e0:	a910      	add	r1, sp, #64	; 0x40
 80010e2:	a818      	add	r0, sp, #96	; 0x60
 80010e4:	f7ff f90a 	bl	80002fc <uECC_vli_cmp_unsafe>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	da05      	bge.n	80010f8 <uECC_vli_modInv+0xfc>
        uECC_vli_add(v, v, mod, num_words);
 80010ec:	a918      	add	r1, sp, #96	; 0x60
 80010ee:	4623      	mov	r3, r4
 80010f0:	462a      	mov	r2, r5
 80010f2:	4608      	mov	r0, r1
 80010f4:	f7ff fa90 	bl	8000618 <uECC_vli_add>
      uECC_vli_sub(v, v, u, num_words);
 80010f8:	a918      	add	r1, sp, #96	; 0x60
 80010fa:	4623      	mov	r3, r4
 80010fc:	aa10      	add	r2, sp, #64	; 0x40
 80010fe:	4608      	mov	r0, r1
 8001100:	f7ff faaf 	bl	8000662 <uECC_vli_sub>
 8001104:	e7bf      	b.n	8001086 <uECC_vli_modInv+0x8a>
 8001106:	0000      	movs	r0, r0

08001108 <EccPoint_double>:
static void EccPoint_double(uECC_word_t *result, const uECC_word_t *p, uECC_Curve curve) {
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (uECC_vli_isZero(p, curve->num_words * 2)) {
 800110a:	f992 7000 	ldrsb.w	r7, [r2]
static void EccPoint_double(uECC_word_t *result, const uECC_word_t *p, uECC_Curve curve) {
 800110e:	460d      	mov	r5, r1
  if (uECC_vli_isZero(p, curve->num_words * 2)) {
 8001110:	0079      	lsls	r1, r7, #1
static void EccPoint_double(uECC_word_t *result, const uECC_word_t *p, uECC_Curve curve) {
 8001112:	b0ab      	sub	sp, #172	; 0xac
 8001114:	4606      	mov	r6, r0
  if (uECC_vli_isZero(p, curve->num_words * 2)) {
 8001116:	b249      	sxtb	r1, r1
 8001118:	4628      	mov	r0, r5
static void EccPoint_double(uECC_word_t *result, const uECC_word_t *p, uECC_Curve curve) {
 800111a:	4614      	mov	r4, r2
  if (uECC_vli_isZero(p, curve->num_words * 2)) {
 800111c:	f7ff fbd7 	bl	80008ce <uECC_vli_isZero>
 8001120:	b138      	cbz	r0, 8001132 <EccPoint_double+0x2a>
    uECC_vli_set(result, p, curve->num_words * 2);
 8001122:	460a      	mov	r2, r1
 8001124:	4630      	mov	r0, r6
 8001126:	4629      	mov	r1, r5
}
 8001128:	b02b      	add	sp, #172	; 0xac
 800112a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    uECC_vli_set(result, p, curve->num_words * 2);
 800112e:	f7ff bc32 	b.w	8000996 <uECC_vli_set>
  uECC_vli_set(p_x, p, curve->num_words);
 8001132:	463a      	mov	r2, r7
 8001134:	4629      	mov	r1, r5
 8001136:	a802      	add	r0, sp, #8
 8001138:	f7ff fc2d 	bl	8000996 <uECC_vli_set>
  uECC_vli_set(p_y, p + curve->num_words, curve->num_words);
 800113c:	f994 1000 	ldrsb.w	r1, [r4]
 8001140:	a80a      	add	r0, sp, #40	; 0x28
 8001142:	460a      	mov	r2, r1
 8001144:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001148:	f7ff fc25 	bl	8000996 <uECC_vli_set>
  if (uECC_vli_isZero(p_y, curve->num_words)) {
 800114c:	f994 1000 	ldrsb.w	r1, [r4]
 8001150:	f7ff fbbd 	bl	80008ce <uECC_vli_isZero>
 8001154:	b130      	cbz	r0, 8001164 <EccPoint_double+0x5c>
    uECC_vli_set(result, p_y, curve->num_words);
 8001156:	460a      	mov	r2, r1
 8001158:	4630      	mov	r0, r6
 800115a:	a90a      	add	r1, sp, #40	; 0x28
 800115c:	f7ff fc1b 	bl	8000996 <uECC_vli_set>
}
 8001160:	b02b      	add	sp, #172	; 0xac
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uECC_vli_modAdd(temp2, temp1, temp1, curve->p, curve->num_words);    // temp2 = 2 x^2
 8001164:	4625      	mov	r5, r4
  uECC_vli_modSquare_fast(temp1, p_x, curve);                          // temp1 = x^2
 8001166:	4622      	mov	r2, r4
 8001168:	a902      	add	r1, sp, #8
 800116a:	a812      	add	r0, sp, #72	; 0x48
 800116c:	f7ff fe30 	bl	8000dd0 <uECC_vli_modSquare_fast>
  uECC_vli_modAdd(temp2, temp1, temp1, curve->p, curve->num_words);    // temp2 = 2 x^2
 8001170:	f915 3b04 	ldrsb.w	r3, [r5], #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	aa12      	add	r2, sp, #72	; 0x48
 8001178:	462b      	mov	r3, r5
 800117a:	4611      	mov	r1, r2
 800117c:	a81a      	add	r0, sp, #104	; 0x68
 800117e:	f7ff fd41 	bl	8000c04 <uECC_vli_modAdd>
  uECC_vli_modAdd(temp1, temp1, temp2, curve->p, curve->num_words);    // temp1 = 3 x^2
 8001182:	f994 3000 	ldrsb.w	r3, [r4]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	a912      	add	r1, sp, #72	; 0x48
 800118a:	462b      	mov	r3, r5
 800118c:	aa1a      	add	r2, sp, #104	; 0x68
 800118e:	4608      	mov	r0, r1
 8001190:	f7ff fd38 	bl	8000c04 <uECC_vli_modAdd>
  uECC_vli_modAdd(temp1, temp1, a, curve->p, curve->num_words);        // temp1 = 3 x^2 + a
 8001194:	f994 3000 	ldrsb.w	r3, [r4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	a912      	add	r1, sp, #72	; 0x48
 800119c:	462b      	mov	r3, r5
 800119e:	4608      	mov	r0, r1
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <EccPoint_double+0x130>)
 80011a2:	f7ff fd2f 	bl	8000c04 <uECC_vli_modAdd>
  uECC_vli_modAdd(temp3, p_y, p_y, curve->p, curve->num_words);        // temp3 = 2y
 80011a6:	f994 3000 	ldrsb.w	r3, [r4]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	aa0a      	add	r2, sp, #40	; 0x28
 80011ae:	462b      	mov	r3, r5
 80011b0:	4611      	mov	r1, r2
 80011b2:	a822      	add	r0, sp, #136	; 0x88
 80011b4:	f7ff fd26 	bl	8000c04 <uECC_vli_modAdd>
  uECC_vli_modInv(temp3, temp3, curve->p, curve->num_words);           // temp3 = 1 / 2y
 80011b8:	a922      	add	r1, sp, #136	; 0x88
 80011ba:	f994 3000 	ldrsb.w	r3, [r4]
 80011be:	462a      	mov	r2, r5
 80011c0:	4608      	mov	r0, r1
 80011c2:	f7ff ff1b 	bl	8000ffc <uECC_vli_modInv>
  uECC_vli_modMult_fast(temp1, temp1, temp3, curve);                   // temp1 = (3 x^2 + a) / 2y = L
 80011c6:	a912      	add	r1, sp, #72	; 0x48
 80011c8:	4623      	mov	r3, r4
 80011ca:	aa22      	add	r2, sp, #136	; 0x88
 80011cc:	4608      	mov	r0, r1
 80011ce:	f7ff fdef 	bl	8000db0 <uECC_vli_modMult_fast>
  uECC_vli_modSquare_fast(temp2, temp1, curve);                    // temp2 = L^2
 80011d2:	4622      	mov	r2, r4
 80011d4:	a912      	add	r1, sp, #72	; 0x48
 80011d6:	a81a      	add	r0, sp, #104	; 0x68
 80011d8:	f7ff fdfa 	bl	8000dd0 <uECC_vli_modSquare_fast>
  uECC_vli_modSub(temp2, temp2, p_x, curve->p, curve->num_words);  // temp2 = L^2 - x
 80011dc:	f994 3000 	ldrsb.w	r3, [r4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	a91a      	add	r1, sp, #104	; 0x68
 80011e4:	462b      	mov	r3, r5
 80011e6:	aa02      	add	r2, sp, #8
 80011e8:	4608      	mov	r0, r1
 80011ea:	f7ff fd24 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modSub(result, temp2, p_x, curve->p, curve->num_words); // result = L^2 - 2x = x2
 80011ee:	f994 3000 	ldrsb.w	r3, [r4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	aa02      	add	r2, sp, #8
 80011f6:	462b      	mov	r3, r5
 80011f8:	a91a      	add	r1, sp, #104	; 0x68
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff fd1b 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modSub(temp3, p_x, result, curve->p, curve->num_words);   // temp3 = x - x2
 8001200:	f994 3000 	ldrsb.w	r3, [r4]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4632      	mov	r2, r6
 8001208:	462b      	mov	r3, r5
 800120a:	a902      	add	r1, sp, #8
 800120c:	a822      	add	r0, sp, #136	; 0x88
 800120e:	f7ff fd12 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modMult_fast(temp2, temp1, temp3, curve);      // temp2 = L*(x-x2)
 8001212:	4623      	mov	r3, r4
 8001214:	aa22      	add	r2, sp, #136	; 0x88
 8001216:	a912      	add	r1, sp, #72	; 0x48
 8001218:	a81a      	add	r0, sp, #104	; 0x68
 800121a:	f7ff fdc9 	bl	8000db0 <uECC_vli_modMult_fast>
  uECC_vli_modSub(result + curve->num_words, temp2, p_y, curve->p, curve->num_words); // result = L*(x-x2) - y
 800121e:	f994 3000 	ldrsb.w	r3, [r4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	aa0a      	add	r2, sp, #40	; 0x28
 8001228:	462b      	mov	r3, r5
 800122a:	a91a      	add	r1, sp, #104	; 0x68
 800122c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8001230:	f7ff fd01 	bl	8000c36 <uECC_vli_modSub>
 8001234:	e794      	b.n	8001160 <EccPoint_double+0x58>
 8001236:	bf00      	nop
 8001238:	08002c40 	.word	0x08002c40

0800123c <EccPoint_mult.constprop.0>:
static void EccPoint_mult(uECC_word_t *result, const uECC_word_t *point,
 800123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	b0cb      	sub	sp, #300	; 0x12c
  uECC_vli_set(R, point, uECC_MAX_WORDS*2);
 8001242:	ad3a      	add	r5, sp, #232	; 0xe8
static void EccPoint_mult(uECC_word_t *result, const uECC_word_t *point,
 8001244:	4681      	mov	r9, r0
 8001246:	4692      	mov	sl, r2
  uECC_vli_set(R, point, uECC_MAX_WORDS*2);
 8001248:	4628      	mov	r0, r5
 800124a:	2210      	movs	r2, #16
static void EccPoint_mult(uECC_word_t *result, const uECC_word_t *point,
 800124c:	461e      	mov	r6, r3
 800124e:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8001250:	4688      	mov	r8, r1
  uECC_vli_set(R, point, uECC_MAX_WORDS*2);
 8001252:	f7ff fba0 	bl	8000996 <uECC_vli_set>
  trigger_high();
 8001256:	f000 fe03 	bl	8001e60 <trigger_high>
  for (bitcount_t i = num_bits-2; i >= 0; --i) { // left-to-right
 800125a:	3e02      	subs	r6, #2
 800125c:	b236      	sxth	r6, r6
 800125e:	2e00      	cmp	r6, #0
 8001260:	da09      	bge.n	8001276 <EccPoint_mult.constprop.0+0x3a>
  trigger_low();
 8001262:	f000 fe04 	bl	8001e6e <trigger_low>
  uECC_vli_set(result, R, uECC_MAX_WORDS*2);
 8001266:	2210      	movs	r2, #16
 8001268:	4629      	mov	r1, r5
 800126a:	4648      	mov	r0, r9
 800126c:	f7ff fb93 	bl	8000996 <uECC_vli_set>
}
 8001270:	b04b      	add	sp, #300	; 0x12c
 8001272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EccPoint_double(R, R, curve);
 8001276:	4629      	mov	r1, r5
 8001278:	4628      	mov	r0, r5
 800127a:	4622      	mov	r2, r4
 800127c:	f7ff ff44 	bl	8001108 <EccPoint_double>
    if (uECC_vli_testBit(scalar, i)) {
 8001280:	4631      	mov	r1, r6
 8001282:	4650      	mov	r0, sl
 8001284:	f7ff fb32 	bl	80008ec <uECC_vli_testBit>
 8001288:	b170      	cbz	r0, 80012a8 <EccPoint_mult.constprop.0+0x6c>
  if (uECC_vli_isZero(p, curve->num_words*2)) {
 800128a:	f994 b000 	ldrsb.w	fp, [r4]
 800128e:	ea4f 074b 	mov.w	r7, fp, lsl #1
 8001292:	b27f      	sxtb	r7, r7
 8001294:	4639      	mov	r1, r7
 8001296:	4628      	mov	r0, r5
 8001298:	f7ff fb19 	bl	80008ce <uECC_vli_isZero>
 800129c:	b130      	cbz	r0, 80012ac <EccPoint_mult.constprop.0+0x70>
      uECC_vli_set(result, q, curve->num_words*2);
 800129e:	463a      	mov	r2, r7
 80012a0:	4641      	mov	r1, r8
      uECC_vli_set(result, p, curve->num_words*2);
 80012a2:	4628      	mov	r0, r5
 80012a4:	f7ff fb77 	bl	8000996 <uECC_vli_set>
  for (bitcount_t i = num_bits-2; i >= 0; --i) { // left-to-right
 80012a8:	3e01      	subs	r6, #1
 80012aa:	e7d7      	b.n	800125c <EccPoint_mult.constprop.0+0x20>
  if (uECC_vli_isZero(q, curve->num_words*2)) {
 80012ac:	4640      	mov	r0, r8
 80012ae:	f7ff fb0e 	bl	80008ce <uECC_vli_isZero>
      uECC_vli_set(result, p, curve->num_words*2);
 80012b2:	463a      	mov	r2, r7
  if (uECC_vli_isZero(q, curve->num_words*2)) {
 80012b4:	b108      	cbz	r0, 80012ba <EccPoint_mult.constprop.0+0x7e>
      uECC_vli_set(result, p, curve->num_words*2);
 80012b6:	4629      	mov	r1, r5
 80012b8:	e7f3      	b.n	80012a2 <EccPoint_mult.constprop.0+0x66>
  if (uECC_vli_equal(p, q, curve->num_words*2)) {
 80012ba:	4641      	mov	r1, r8
 80012bc:	4628      	mov	r0, r5
 80012be:	f7ff fc4d 	bl	8000b5c <uECC_vli_equal>
 80012c2:	b128      	cbz	r0, 80012d0 <EccPoint_mult.constprop.0+0x94>
      EccPoint_double(result, p, curve);
 80012c4:	4622      	mov	r2, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	4628      	mov	r0, r5
 80012ca:	f7ff ff1d 	bl	8001108 <EccPoint_double>
      return;
 80012ce:	e7eb      	b.n	80012a8 <EccPoint_mult.constprop.0+0x6c>
  uECC_vli_set(p_x, p, curve->num_words);
 80012d0:	465a      	mov	r2, fp
 80012d2:	4629      	mov	r1, r5
 80012d4:	a802      	add	r0, sp, #8
 80012d6:	f7ff fb5e 	bl	8000996 <uECC_vli_set>
  uECC_vli_set(p_y, p + curve->num_words, curve->num_words);
 80012da:	f994 1000 	ldrsb.w	r1, [r4]
 80012de:	a80a      	add	r0, sp, #40	; 0x28
 80012e0:	460a      	mov	r2, r1
 80012e2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80012e6:	f7ff fb56 	bl	8000996 <uECC_vli_set>
  uECC_vli_set(q_x, q, curve->num_words);
 80012ea:	f994 2000 	ldrsb.w	r2, [r4]
 80012ee:	4641      	mov	r1, r8
 80012f0:	a812      	add	r0, sp, #72	; 0x48
 80012f2:	f7ff fb50 	bl	8000996 <uECC_vli_set>
  uECC_vli_set(q_y, q + curve->num_words, curve->num_words);
 80012f6:	f994 1000 	ldrsb.w	r1, [r4]
  uECC_vli_modSub(temp1, q_y, p_y, curve->p, curve->num_words); // temp1 = q_y - p_y
 80012fa:	4627      	mov	r7, r4
  uECC_vli_set(q_y, q + curve->num_words, curve->num_words);
 80012fc:	a81a      	add	r0, sp, #104	; 0x68
 80012fe:	460a      	mov	r2, r1
 8001300:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001304:	f7ff fb47 	bl	8000996 <uECC_vli_set>
  uECC_vli_modSub(temp1, q_y, p_y, curve->p, curve->num_words); // temp1 = q_y - p_y
 8001308:	f917 3b04 	ldrsb.w	r3, [r7], #4
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	aa0a      	add	r2, sp, #40	; 0x28
 8001310:	463b      	mov	r3, r7
 8001312:	4601      	mov	r1, r0
 8001314:	a822      	add	r0, sp, #136	; 0x88
 8001316:	f7ff fc8e 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modSub(temp2, q_x, p_x, curve->p, curve->num_words); // temp2 = q_x - p_x
 800131a:	f994 3000 	ldrsb.w	r3, [r4]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	aa02      	add	r2, sp, #8
 8001322:	463b      	mov	r3, r7
 8001324:	a912      	add	r1, sp, #72	; 0x48
 8001326:	a82a      	add	r0, sp, #168	; 0xa8
 8001328:	f7ff fc85 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modInv(temp3, temp2, curve->p, curve->num_words);    // temp3 = 1 / (q_x - p_x)
 800132c:	f994 3000 	ldrsb.w	r3, [r4]
 8001330:	463a      	mov	r2, r7
 8001332:	a92a      	add	r1, sp, #168	; 0xa8
 8001334:	a832      	add	r0, sp, #200	; 0xc8
 8001336:	f7ff fe61 	bl	8000ffc <uECC_vli_modInv>
  uECC_vli_modMult_fast(temp1, temp1, temp3, curve);            // temp1 = (q_y - p_y) / (q_x - p_x) = L
 800133a:	a922      	add	r1, sp, #136	; 0x88
 800133c:	4623      	mov	r3, r4
 800133e:	aa32      	add	r2, sp, #200	; 0xc8
 8001340:	4608      	mov	r0, r1
 8001342:	f7ff fd35 	bl	8000db0 <uECC_vli_modMult_fast>
  uECC_vli_modSquare_fast(temp2, temp1, curve);                   // temp2 = L^2
 8001346:	4622      	mov	r2, r4
 8001348:	a922      	add	r1, sp, #136	; 0x88
 800134a:	a82a      	add	r0, sp, #168	; 0xa8
 800134c:	f7ff fd40 	bl	8000dd0 <uECC_vli_modSquare_fast>
  uECC_vli_modSub(temp2, temp2, p_x, curve->p, curve->num_words); // temp2 = L^2 - p_x
 8001350:	f994 3000 	ldrsb.w	r3, [r4]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	a92a      	add	r1, sp, #168	; 0xa8
 8001358:	463b      	mov	r3, r7
 800135a:	aa02      	add	r2, sp, #8
 800135c:	4608      	mov	r0, r1
 800135e:	f7ff fc6a 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modSub(result, temp2, q_x, curve->p, curve->num_words);// result = L^2 - p_x - q_x = x2
 8001362:	f994 3000 	ldrsb.w	r3, [r4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	aa12      	add	r2, sp, #72	; 0x48
 800136a:	463b      	mov	r3, r7
 800136c:	a92a      	add	r1, sp, #168	; 0xa8
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fc61 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modSub(temp3, p_x, result, curve->p, curve->num_words);                    // temp3 = p_x - x2
 8001374:	f994 3000 	ldrsb.w	r3, [r4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462a      	mov	r2, r5
 800137c:	463b      	mov	r3, r7
 800137e:	a902      	add	r1, sp, #8
 8001380:	a832      	add	r0, sp, #200	; 0xc8
 8001382:	f7ff fc58 	bl	8000c36 <uECC_vli_modSub>
  uECC_vli_modMult_fast(temp2, temp1, temp3, curve);                                  // temp2 = L * (p_x - x2)
 8001386:	4623      	mov	r3, r4
 8001388:	aa32      	add	r2, sp, #200	; 0xc8
 800138a:	a922      	add	r1, sp, #136	; 0x88
 800138c:	a82a      	add	r0, sp, #168	; 0xa8
 800138e:	f7ff fd0f 	bl	8000db0 <uECC_vli_modMult_fast>
  uECC_vli_modSub(result + curve->num_words, temp2, p_y, curve->p, curve->num_words); // result = L * (p_x - x2) - p_y
 8001392:	f994 3000 	ldrsb.w	r3, [r4]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	aa0a      	add	r2, sp, #40	; 0x28
 800139c:	463b      	mov	r3, r7
 800139e:	a92a      	add	r1, sp, #168	; 0xa8
 80013a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80013a4:	f7ff fc47 	bl	8000c36 <uECC_vli_modSub>
 80013a8:	e77e      	b.n	80012a8 <EccPoint_mult.constprop.0+0x6c>

080013aa <EccPoint_compute_public_key>:

static uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
                                               uECC_word_t *private_key,
                                               uECC_Curve curve) {
 80013aa:	b530      	push	{r4, r5, lr}
 80013ac:	4614      	mov	r4, r2
 80013ae:	b095      	sub	sp, #84	; 0x54
 80013b0:	4605      	mov	r5, r0
  uECC_word_t tmp1[uECC_MAX_WORDS];
  uECC_word_t tmp2[uECC_MAX_WORDS];
  uECC_word_t *p2[2] = {tmp1, tmp2};
 80013b2:	aa0c      	add	r2, sp, #48	; 0x30
  uECC_word_t carry;

  /* Regularize the bitcount for the private key so that attackers cannot use a
     side channel attack to learn the number of leading zeros. */
  carry = regularize_k(private_key, tmp1, tmp2, curve);
 80013b4:	4623      	mov	r3, r4
                                               uECC_Curve curve) {
 80013b6:	4608      	mov	r0, r1
  uECC_word_t *p2[2] = {tmp1, tmp2};
 80013b8:	a904      	add	r1, sp, #16
 80013ba:	9102      	str	r1, [sp, #8]
 80013bc:	9203      	str	r2, [sp, #12]
  carry = regularize_k(private_key, tmp1, tmp2, curve);
 80013be:	f7ff fa9f 	bl	8000900 <regularize_k>

  EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 80013c2:	fab0 f280 	clz	r2, r0
 80013c6:	8863      	ldrh	r3, [r4, #2]
 80013c8:	9400      	str	r4, [sp, #0]
 80013ca:	a914      	add	r1, sp, #80	; 0x50
 80013cc:	0952      	lsrs	r2, r2, #5
 80013ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80013d2:	3301      	adds	r3, #1
 80013d4:	f852 2c48 	ldr.w	r2, [r2, #-72]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80013de:	4628      	mov	r0, r5
 80013e0:	f7ff ff2c 	bl	800123c <EccPoint_mult.constprop.0>
  if (EccPoint_isZero(result, curve)) {
 80013e4:	7821      	ldrb	r1, [r4, #0]
 80013e6:	0049      	lsls	r1, r1, #1
 80013e8:	b249      	sxtb	r1, r1
 80013ea:	4628      	mov	r0, r5
 80013ec:	f7ff fa6f 	bl	80008ce <uECC_vli_isZero>
    return 0;
  }
  return 1;
}
 80013f0:	fab0 f080 	clz	r0, r0
 80013f4:	0940      	lsrs	r0, r0, #5
 80013f6:	b015      	add	sp, #84	; 0x54
 80013f8:	bd30      	pop	{r4, r5, pc}

080013fa <uECC_vli_nativeToBytes>:
}

#else

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                         const uECC_word_t *native) {
 80013fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  wordcount_t i;
  for (i = 0; i < num_bytes; ++i) {
 80013fc:	2500      	movs	r5, #0
    unsigned b = num_bytes - 1 - i;
 80013fe:	1e4f      	subs	r7, r1, #1
 8001400:	b26c      	sxtb	r4, r5
  for (i = 0; i < num_bytes; ++i) {
 8001402:	428c      	cmp	r4, r1
 8001404:	f105 0501 	add.w	r5, r5, #1
 8001408:	db00      	blt.n	800140c <uECC_vli_nativeToBytes+0x12>
    bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
  }
}
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned b = num_bytes - 1 - i;
 800140c:	1b3b      	subs	r3, r7, r4
    bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 800140e:	f023 0603 	bic.w	r6, r3, #3
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	5996      	ldr	r6, [r2, r6]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	fa26 f303 	lsr.w	r3, r6, r3
 800141e:	5503      	strb	r3, [r0, r4]
  for (i = 0; i < num_bytes; ++i) {
 8001420:	e7ee      	b.n	8001400 <uECC_vli_nativeToBytes+0x6>

08001422 <uECC_vli_bytesToNative>:

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes, int num_bytes) {
 8001422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001424:	460e      	mov	r6, r1
  wordcount_t i;
  uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001426:	1cd1      	adds	r1, r2, #3
 8001428:	bf48      	it	mi
 800142a:	1d91      	addmi	r1, r2, #6
                                         const uint8_t *bytes, int num_bytes) {
 800142c:	4614      	mov	r4, r2
  uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 800142e:	f341 0187 	sbfx	r1, r1, #2, #8
                                         const uint8_t *bytes, int num_bytes) {
 8001432:	4605      	mov	r5, r0
  for (i = 0; i < num_bytes; ++i) {
    unsigned b = num_bytes - 1 - i;
 8001434:	1e67      	subs	r7, r4, #1
  uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001436:	f7ff fa44 	bl	80008c2 <uECC_vli_clear>
  for (i = 0; i < num_bytes; ++i) {
 800143a:	2000      	movs	r0, #0
 800143c:	b242      	sxtb	r2, r0
 800143e:	42a2      	cmp	r2, r4
 8001440:	f100 0001 	add.w	r0, r0, #1
 8001444:	db00      	blt.n	8001448 <uECC_vli_bytesToNative+0x26>
    native[b / uECC_WORD_SIZE] |= (uECC_word_t)bytes[i]
                                  << (8 * (b % uECC_WORD_SIZE));
  }
}
 8001446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    unsigned b = num_bytes - 1 - i;
 8001448:	1abb      	subs	r3, r7, r2
    native[b / uECC_WORD_SIZE] |= (uECC_word_t)bytes[i]
 800144a:	f023 0103 	bic.w	r1, r3, #3
 800144e:	5cb2      	ldrb	r2, [r6, r2]
                                  << (8 * (b % uECC_WORD_SIZE));
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
    native[b / uECC_WORD_SIZE] |= (uECC_word_t)bytes[i]
 800145a:	586a      	ldr	r2, [r5, r1]
 800145c:	431a      	orrs	r2, r3
 800145e:	506a      	str	r2, [r5, r1]
  for (i = 0; i < num_bytes; ++i) {
 8001460:	e7ec      	b.n	800143c <uECC_vli_bytesToNative+0x1a>

08001462 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native, const uint8_t *bits,
                     unsigned bits_size, uECC_Curve curve) {
 8001462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001466:	4698      	mov	r8, r3
  unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8001468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800146c:	f113 041f 	adds.w	r4, r3, #31
 8001470:	bf48      	it	mi
 8001472:	f103 043e 	addmi.w	r4, r3, #62	; 0x3e
  unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8001476:	1ddd      	adds	r5, r3, #7
 8001478:	bf48      	it	mi
 800147a:	f103 050e 	addmi.w	r5, r3, #14
  unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800147e:	1166      	asrs	r6, r4, #5
  unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8001480:	10ec      	asrs	r4, r5, #3
 8001482:	4294      	cmp	r4, r2

  if (bits_size > num_n_bytes) {
    bits_size = num_n_bytes;
  }

  uECC_vli_clear(native, num_n_words);
 8001484:	b275      	sxtb	r5, r6
 8001486:	bf28      	it	cs
 8001488:	4614      	movcs	r4, r2
                     unsigned bits_size, uECC_Curve curve) {
 800148a:	4607      	mov	r7, r0
 800148c:	4689      	mov	r9, r1
  uECC_vli_clear(native, num_n_words);
 800148e:	4629      	mov	r1, r5
 8001490:	f7ff fa17 	bl	80008c2 <uECC_vli_clear>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *)native, bits, bits_size);
#else
  uECC_vli_bytesToNative(native, bits, bits_size);
 8001494:	4622      	mov	r2, r4
 8001496:	4649      	mov	r1, r9
 8001498:	4638      	mov	r0, r7
 800149a:	f7ff ffc2 	bl	8001422 <uECC_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 800149e:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80014a2:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 80014a6:	ea4f 02c4 	mov.w	r2, r4, lsl #3
 80014aa:	d220      	bcs.n	80014ee <bits2int+0x8c>
    return;
  }
  shift = bits_size * 8 - curve->num_n_bits;
 80014ac:	1ad2      	subs	r2, r2, r3
  carry = 0;
  ptr = native + num_n_words;
 80014ae:	eb07 0486 	add.w	r4, r7, r6, lsl #2
  carry = 0;
 80014b2:	2100      	movs	r1, #0
  while (ptr-- > native) {
    uECC_word_t temp = *ptr;
    *ptr = (temp >> shift) | carry;
    carry = temp << (uECC_WORD_BITS - shift);
 80014b4:	f1c2 0620 	rsb	r6, r2, #32
  while (ptr-- > native) {
 80014b8:	42a7      	cmp	r7, r4
 80014ba:	d30f      	bcc.n	80014dc <bits2int+0x7a>
  }

  /* Reduce mod curve_n */
  if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 80014bc:	f108 0824 	add.w	r8, r8, #36	; 0x24
 80014c0:	462a      	mov	r2, r5
 80014c2:	4639      	mov	r1, r7
 80014c4:	4640      	mov	r0, r8
 80014c6:	f7fe ff19 	bl	80002fc <uECC_vli_cmp_unsafe>
 80014ca:	2801      	cmp	r0, #1
 80014cc:	d00f      	beq.n	80014ee <bits2int+0x8c>
    uECC_vli_sub(native, native, curve->n, num_n_words);
 80014ce:	462b      	mov	r3, r5
 80014d0:	4642      	mov	r2, r8
 80014d2:	4638      	mov	r0, r7
  }
}
 80014d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uECC_vli_sub(native, native, curve->n, num_n_words);
 80014d8:	f7ff b8c3 	b.w	8000662 <uECC_vli_sub>
    uECC_word_t temp = *ptr;
 80014dc:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    *ptr = (temp >> shift) | carry;
 80014e0:	fa20 f302 	lsr.w	r3, r0, r2
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6023      	str	r3, [r4, #0]
    carry = temp << (uECC_WORD_BITS - shift);
 80014e8:	fa00 f106 	lsl.w	r1, r0, r6
 80014ec:	e7e4      	b.n	80014b8 <bits2int+0x56>
}
 80014ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f2:	0000      	movs	r0, r0

080014f4 <uECC_generate_random_int>:
                                          wordcount_t num_words) {
 80014f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f8:	460f      	mov	r7, r1
  if (!g_rng_function) {
 80014fa:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8001568 <uECC_generate_random_int+0x74>
                                          wordcount_t num_words) {
 80014fe:	4606      	mov	r6, r0
  bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 8001500:	4611      	mov	r1, r2
 8001502:	4638      	mov	r0, r7
                                          wordcount_t num_words) {
 8001504:	4614      	mov	r4, r2
  bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 8001506:	f7ff fa27 	bl	8000958 <uECC_vli_numBits>
  if (!g_rng_function) {
 800150a:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
 800150e:	b303      	cbz	r3, 8001552 <uECC_generate_random_int+0x5e>
    if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8001510:	2504      	movs	r5, #4
        mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8001512:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
    if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8001516:	fb14 fb05 	smulbb	fp, r4, r5
        mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 800151a:	b200      	sxth	r0, r0
    random[num_words - 1] &=
 800151c:	fb05 6504 	mla	r5, r5, r4, r6
        mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8001520:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    random[num_words - 1] &=
 8001524:	3d04      	subs	r5, #4
        mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8001526:	fa28 f800 	lsr.w	r8, r8, r0
 800152a:	f04f 0940 	mov.w	r9, #64	; 0x40
    if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 800152e:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
 8001532:	4659      	mov	r1, fp
 8001534:	4630      	mov	r0, r6
 8001536:	4798      	blx	r3
 8001538:	b158      	cbz	r0, 8001552 <uECC_generate_random_int+0x5e>
    random[num_words - 1] &=
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	ea03 0308 	and.w	r3, r3, r8
 8001540:	602b      	str	r3, [r5, #0]
    if (!uECC_vli_isZero(random, num_words) &&
 8001542:	4621      	mov	r1, r4
 8001544:	4630      	mov	r0, r6
 8001546:	f7ff f9c2 	bl	80008ce <uECC_vli_isZero>
 800154a:	b120      	cbz	r0, 8001556 <uECC_generate_random_int+0x62>
  for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 800154c:	f1b9 0901 	subs.w	r9, r9, #1
 8001550:	d1ed      	bne.n	800152e <uECC_generate_random_int+0x3a>
    return 0;
 8001552:	2000      	movs	r0, #0
 8001554:	e006      	b.n	8001564 <uECC_generate_random_int+0x70>
        uECC_vli_cmp(top, random, num_words) == 1) {
 8001556:	4622      	mov	r2, r4
 8001558:	4631      	mov	r1, r6
 800155a:	4638      	mov	r0, r7
 800155c:	f7ff fb10 	bl	8000b80 <uECC_vli_cmp>
    if (!uECC_vli_isZero(random, num_words) &&
 8001560:	2801      	cmp	r0, #1
 8001562:	d1f3      	bne.n	800154c <uECC_generate_random_int+0x58>
}
 8001564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001568:	2000001c 	.word	0x2000001c

0800156c <uECC_sign_with_k>:

static int uECC_sign_with_k(const uint8_t *private_key,
                            const uint8_t *message_hash, unsigned hash_size,
                            uECC_word_t *k, uint8_t *signature,
                            uECC_Curve curve) {
 800156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001570:	b0a9      	sub	sp, #164	; 0xa4
 8001572:	461d      	mov	r5, r3
 8001574:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 8001576:	9205      	str	r2, [sp, #20]
  uECC_word_t *p = (uECC_word_t *)signature;
#else
  uECC_word_t p[uECC_MAX_WORDS * 2];
#endif
  uECC_word_t carry;
  wordcount_t num_words = curve->num_words;
 8001578:	f996 b000 	ldrsb.w	fp, [r6]
                            uECC_Curve curve) {
 800157c:	e9cd 0103 	strd	r0, r1, [sp, #12]
  uECC_word_t *k2[2] = {tmp, s};
 8001580:	f10d 0920 	add.w	r9, sp, #32
 8001584:	ab10      	add	r3, sp, #64	; 0x40
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);

  bitcount_t num_n_bits = curve->num_n_bits;

  /* Make sure 0 < k < curve_n */
  if (uECC_vli_isZero(k, num_words) ||
 8001586:	4659      	mov	r1, fp
 8001588:	4628      	mov	r0, r5
  uECC_word_t *k2[2] = {tmp, s};
 800158a:	f8cd 9018 	str.w	r9, [sp, #24]
 800158e:	9307      	str	r3, [sp, #28]
  if (uECC_vli_isZero(k, num_words) ||
 8001590:	f7ff f99d 	bl	80008ce <uECC_vli_isZero>
 8001594:	b118      	cbz	r0, 800159e <uECC_sign_with_k+0x32>
      uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    return 0;
 8001596:	2000      	movs	r0, #0
        curve->num_bytes);
#else
  uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
#endif
  return 1;
}
 8001598:	b029      	add	sp, #164	; 0xa4
 800159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800159e:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 80015a2:	f118 041f 	adds.w	r4, r8, #31
 80015a6:	bf48      	it	mi
 80015a8:	f108 043e 	addmi.w	r4, r8, #62	; 0x3e
 80015ac:	f344 1447 	sbfx	r4, r4, #5, #8
      uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 80015b0:	f106 0724 	add.w	r7, r6, #36	; 0x24
 80015b4:	4622      	mov	r2, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	4638      	mov	r0, r7
 80015ba:	f7ff fae1 	bl	8000b80 <uECC_vli_cmp>
  if (uECC_vli_isZero(k, num_words) ||
 80015be:	2801      	cmp	r0, #1
      uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 80015c0:	4682      	mov	sl, r0
  if (uECC_vli_isZero(k, num_words) ||
 80015c2:	d1e8      	bne.n	8001596 <uECC_sign_with_k+0x2a>
  carry = regularize_k(k, tmp, s, curve);
 80015c4:	4633      	mov	r3, r6
 80015c6:	aa10      	add	r2, sp, #64	; 0x40
 80015c8:	4649      	mov	r1, r9
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7ff f998 	bl	8000900 <regularize_k>
  EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
 80015d0:	fab0 f080 	clz	r0, r0
 80015d4:	aa28      	add	r2, sp, #160	; 0xa0
 80015d6:	0940      	lsrs	r0, r0, #5
 80015d8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80015dc:	9600      	str	r6, [sp, #0]
 80015de:	f108 0301 	add.w	r3, r8, #1
 80015e2:	f850 2c88 	ldr.w	r2, [r0, #-136]
 80015e6:	f106 0144 	add.w	r1, r6, #68	; 0x44
 80015ea:	a818      	add	r0, sp, #96	; 0x60
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	f7ff fe25 	bl	800123c <EccPoint_mult.constprop.0>
  if (uECC_vli_isZero(p, num_words)) {
 80015f2:	4659      	mov	r1, fp
 80015f4:	a818      	add	r0, sp, #96	; 0x60
 80015f6:	f7ff f96a 	bl	80008ce <uECC_vli_isZero>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d1cb      	bne.n	8001596 <uECC_sign_with_k+0x2a>
  if (!g_rng_function) {
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <uECC_sign_with_k+0x170>)
 8001600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001604:	2b00      	cmp	r3, #0
 8001606:	d161      	bne.n	80016cc <uECC_sign_with_k+0x160>
    uECC_vli_clear(tmp, num_n_words);
 8001608:	4621      	mov	r1, r4
 800160a:	4648      	mov	r0, r9
 800160c:	f7ff f959 	bl	80008c2 <uECC_vli_clear>
    tmp[0] = 1;
 8001610:	f8cd a020 	str.w	sl, [sp, #32]
  uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8001614:	463b      	mov	r3, r7
 8001616:	aa08      	add	r2, sp, #32
 8001618:	4629      	mov	r1, r5
 800161a:	4628      	mov	r0, r5
 800161c:	9400      	str	r4, [sp, #0]
 800161e:	f7ff fbb7 	bl	8000d90 <uECC_vli_modMult>
  uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8001622:	4623      	mov	r3, r4
 8001624:	463a      	mov	r2, r7
 8001626:	4629      	mov	r1, r5
 8001628:	4628      	mov	r0, r5
 800162a:	f7ff fce7 	bl	8000ffc <uECC_vli_modInv>
  uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 800162e:	463b      	mov	r3, r7
 8001630:	aa08      	add	r2, sp, #32
 8001632:	4629      	mov	r1, r5
 8001634:	4628      	mov	r0, r5
 8001636:	9400      	str	r4, [sp, #0]
 8001638:	f7ff fbaa 	bl	8000d90 <uECC_vli_modMult>
  uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 800163c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8001640:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001642:	aa18      	add	r2, sp, #96	; 0x60
 8001644:	f7ff fed9 	bl	80013fa <uECC_vli_nativeToBytes>
                         BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8001648:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  uECC_vli_bytesToNative(tmp, private_key,
 800164c:	9903      	ldr	r1, [sp, #12]
 800164e:	1dda      	adds	r2, r3, #7
 8001650:	bf48      	it	mi
 8001652:	f103 020e 	addmi.w	r2, r3, #14
 8001656:	10d2      	asrs	r2, r2, #3
 8001658:	a808      	add	r0, sp, #32
 800165a:	f7ff fee2 	bl	8001422 <uECC_vli_bytesToNative>
  s[num_n_words - 1] = 0;
 800165e:	aa28      	add	r2, sp, #160	; 0xa0
 8001660:	1e63      	subs	r3, r4, #1
 8001662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001666:	2200      	movs	r2, #0
  uECC_vli_set(s, p, num_words);
 8001668:	a810      	add	r0, sp, #64	; 0x40
  s[num_n_words - 1] = 0;
 800166a:	f843 2c60 	str.w	r2, [r3, #-96]
  uECC_vli_set(s, p, num_words);
 800166e:	a918      	add	r1, sp, #96	; 0x60
 8001670:	465a      	mov	r2, fp
 8001672:	f7ff f990 	bl	8000996 <uECC_vli_set>
  uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 8001676:	4602      	mov	r2, r0
 8001678:	463b      	mov	r3, r7
 800167a:	a908      	add	r1, sp, #32
 800167c:	9400      	str	r4, [sp, #0]
 800167e:	f7ff fb87 	bl	8000d90 <uECC_vli_modMult>
  bits2int(tmp, message_hash, hash_size, curve);
 8001682:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8001686:	4633      	mov	r3, r6
 8001688:	a808      	add	r0, sp, #32
 800168a:	f7ff feea 	bl	8001462 <bits2int>
  uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 800168e:	aa10      	add	r2, sp, #64	; 0x40
 8001690:	4610      	mov	r0, r2
 8001692:	463b      	mov	r3, r7
 8001694:	a908      	add	r1, sp, #32
 8001696:	9400      	str	r4, [sp, #0]
 8001698:	f7ff fab4 	bl	8000c04 <uECC_vli_modAdd>
  uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 800169c:	a910      	add	r1, sp, #64	; 0x40
 800169e:	4608      	mov	r0, r1
 80016a0:	463b      	mov	r3, r7
 80016a2:	462a      	mov	r2, r5
 80016a4:	9400      	str	r4, [sp, #0]
 80016a6:	f7ff fb73 	bl	8000d90 <uECC_vli_modMult>
  if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 80016aa:	4621      	mov	r1, r4
 80016ac:	a810      	add	r0, sp, #64	; 0x40
 80016ae:	f7ff f953 	bl	8000958 <uECC_vli_numBits>
 80016b2:	f996 1001 	ldrsb.w	r1, [r6, #1]
 80016b6:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 80016ba:	f73f af6c 	bgt.w	8001596 <uECC_sign_with_k+0x2a>
  uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 80016be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80016c0:	aa10      	add	r2, sp, #64	; 0x40
 80016c2:	1858      	adds	r0, r3, r1
 80016c4:	f7ff fe99 	bl	80013fa <uECC_vli_nativeToBytes>
  return 1;
 80016c8:	2001      	movs	r0, #1
 80016ca:	e765      	b.n	8001598 <uECC_sign_with_k+0x2c>
  } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
 80016cc:	4622      	mov	r2, r4
 80016ce:	4639      	mov	r1, r7
 80016d0:	4648      	mov	r0, r9
 80016d2:	f7ff ff0f 	bl	80014f4 <uECC_generate_random_int>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d19c      	bne.n	8001614 <uECC_sign_with_k+0xa8>
 80016da:	e75c      	b.n	8001596 <uECC_sign_with_k+0x2a>
 80016dc:	2000001c 	.word	0x2000001c

080016e0 <uECC_compute_public_key>:
                            uECC_Curve curve) {
 80016e0:	b570      	push	{r4, r5, r6, lr}
                         BITS_TO_BYTES(curve->num_n_bits));
 80016e2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
                            uECC_Curve curve) {
 80016e6:	4614      	mov	r4, r2
  uECC_vli_bytesToNative(_private, private_key,
 80016e8:	1dda      	adds	r2, r3, #7
 80016ea:	bf48      	it	mi
 80016ec:	f103 020e 	addmi.w	r2, r3, #14
                            uECC_Curve curve) {
 80016f0:	b098      	sub	sp, #96	; 0x60
  uECC_vli_bytesToNative(_private, private_key,
 80016f2:	10d2      	asrs	r2, r2, #3
                            uECC_Curve curve) {
 80016f4:	460e      	mov	r6, r1
  uECC_vli_bytesToNative(_private, private_key,
 80016f6:	4601      	mov	r1, r0
 80016f8:	4668      	mov	r0, sp
 80016fa:	f7ff fe92 	bl	8001422 <uECC_vli_bytesToNative>
  if (uECC_vli_isZero(_private, BITS_TO_WORDS(curve->num_n_bits))) {
 80016fe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001702:	f113 021f 	adds.w	r2, r3, #31
 8001706:	bf48      	it	mi
 8001708:	f103 023e 	addmi.w	r2, r3, #62	; 0x3e
 800170c:	f342 1147 	sbfx	r1, r2, #5, #8
 8001710:	4668      	mov	r0, sp
 8001712:	f7ff f8dc 	bl	80008ce <uECC_vli_isZero>
 8001716:	b110      	cbz	r0, 800171e <uECC_compute_public_key+0x3e>
    return 0;
 8001718:	2000      	movs	r0, #0
}
 800171a:	b018      	add	sp, #96	; 0x60
 800171c:	bd70      	pop	{r4, r5, r6, pc}
  if (uECC_vli_cmp(curve->n, _private, BITS_TO_WORDS(curve->num_n_bits)) != 1) {
 800171e:	460a      	mov	r2, r1
 8001720:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001724:	4669      	mov	r1, sp
 8001726:	f7ff fa2b 	bl	8000b80 <uECC_vli_cmp>
 800172a:	2801      	cmp	r0, #1
 800172c:	4605      	mov	r5, r0
 800172e:	d1f3      	bne.n	8001718 <uECC_compute_public_key+0x38>
  if (!EccPoint_compute_public_key(_public, _private, curve)) {
 8001730:	4622      	mov	r2, r4
 8001732:	4669      	mov	r1, sp
 8001734:	a808      	add	r0, sp, #32
 8001736:	f7ff fe38 	bl	80013aa <EccPoint_compute_public_key>
 800173a:	2800      	cmp	r0, #0
 800173c:	d0ec      	beq.n	8001718 <uECC_compute_public_key+0x38>
  uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
 800173e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8001742:	aa08      	add	r2, sp, #32
 8001744:	4630      	mov	r0, r6
 8001746:	f7ff fe58 	bl	80013fa <uECC_vli_nativeToBytes>
  uECC_vli_nativeToBytes(public_key + curve->num_bytes, curve->num_bytes,
 800174a:	f994 1001 	ldrsb.w	r1, [r4, #1]
                         _public + curve->num_words);
 800174e:	f994 2000 	ldrsb.w	r2, [r4]
  uECC_vli_nativeToBytes(public_key + curve->num_bytes, curve->num_bytes,
 8001752:	ab08      	add	r3, sp, #32
 8001754:	1870      	adds	r0, r6, r1
 8001756:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800175a:	f7ff fe4e 	bl	80013fa <uECC_vli_nativeToBytes>
  return 1;
 800175e:	4628      	mov	r0, r5
 8001760:	e7db      	b.n	800171a <uECC_compute_public_key+0x3a>
 8001762:	0000      	movs	r0, r0

08001764 <set_k>:
uint8_t set_k(uint8_t *x, uint8_t len) {
 8001764:	b500      	push	{lr}
  if (len != sizeof(K)) {
 8001766:	2920      	cmp	r1, #32
uint8_t set_k(uint8_t *x, uint8_t len) {
 8001768:	b091      	sub	sp, #68	; 0x44
  if (len != sizeof(K)) {
 800176a:	d001      	beq.n	8001770 <set_k+0xc>
    infinite_led_blink_red(); // error
 800176c:	f7fe ff42 	bl	80005f4 <infinite_led_blink_red>
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <set_k+0x40>)
 8001772:	1e43      	subs	r3, r0, #1
 8001774:	301f      	adds	r0, #31
    K[i] = x[i];
 8001776:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800177a:	f802 1b01 	strb.w	r1, [r2], #1
  for (unsigned i = 0; i < sizeof(K); i++) {
 800177e:	4283      	cmp	r3, r0
 8001780:	d1f9      	bne.n	8001776 <set_k+0x12>
  if (!uECC_compute_public_key(K, public_key, curve)) {
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <set_k+0x44>)
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <set_k+0x40>)
 8001786:	4669      	mov	r1, sp
 8001788:	f7ff ffaa 	bl	80016e0 <uECC_compute_public_key>
 800178c:	2800      	cmp	r0, #0
 800178e:	d0ed      	beq.n	800176c <set_k+0x8>
  simpleserial_put('r', sizeof(public_key), public_key);
 8001790:	466a      	mov	r2, sp
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	2072      	movs	r0, #114	; 0x72
 8001796:	f000 fa03 	bl	8001ba0 <simpleserial_put>
}
 800179a:	2000      	movs	r0, #0
 800179c:	b011      	add	sp, #68	; 0x44
 800179e:	f85d fb04 	ldr.w	pc, [sp], #4
 80017a2:	bf00      	nop
 80017a4:	200000a4 	.word	0x200000a4
 80017a8:	08002b8c 	.word	0x08002b8c

080017ac <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
              unsigned hash_size, uint8_t *signature, uECC_Curve curve) {
 80017ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b0:	b08a      	sub	sp, #40	; 0x28
 80017b2:	4605      	mov	r5, r0
 80017b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80017b8:	460e      	mov	r6, r1
 80017ba:	4617      	mov	r7, r2
 80017bc:	4698      	mov	r8, r3
 80017be:	2440      	movs	r4, #64	; 0x40
  uECC_word_t k[uECC_MAX_WORDS];
  uECC_word_t tries;

  for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    if (!uECC_generate_random_int(k, curve->n,
 80017c0:	f109 0a24 	add.w	sl, r9, #36	; 0x24
                                  BITS_TO_WORDS(curve->num_n_bits))) {
 80017c4:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 80017c8:	f113 021f 	adds.w	r2, r3, #31
 80017cc:	bf48      	it	mi
 80017ce:	f103 023e 	addmi.w	r2, r3, #62	; 0x3e
    if (!uECC_generate_random_int(k, curve->n,
 80017d2:	f342 1247 	sbfx	r2, r2, #5, #8
 80017d6:	4651      	mov	r1, sl
 80017d8:	a802      	add	r0, sp, #8
 80017da:	f7ff fe8b 	bl	80014f4 <uECC_generate_random_int>
 80017de:	b150      	cbz	r0, 80017f6 <uECC_sign+0x4a>
    
      return 0;
    }

    if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature,
 80017e0:	e9cd 8900 	strd	r8, r9, [sp]
 80017e4:	ab02      	add	r3, sp, #8
 80017e6:	463a      	mov	r2, r7
 80017e8:	4631      	mov	r1, r6
 80017ea:	4628      	mov	r0, r5
 80017ec:	f7ff febe 	bl	800156c <uECC_sign_with_k>
 80017f0:	b928      	cbnz	r0, 80017fe <uECC_sign+0x52>
  for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 80017f2:	3c01      	subs	r4, #1
 80017f4:	d1e6      	bne.n	80017c4 <uECC_sign+0x18>
      return 0;
 80017f6:	2000      	movs	r0, #0
                         curve)) {
      return 1;
    }
  }
  return 0;
}
 80017f8:	b00a      	add	sp, #40	; 0x28
 80017fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return 1;
 80017fe:	2001      	movs	r0, #1
 8001800:	e7fa      	b.n	80017f8 <uECC_sign+0x4c>
 8001802:	0000      	movs	r0, r0

08001804 <sign_message>:

// Returns signed message that consists of x coordinate of randomized(K) * curve->G and sign-proof s
uint8_t sign_message(uint8_t *x, uint8_t len) {
 8001804:	b500      	push	{lr}
 8001806:	b093      	sub	sp, #76	; 0x4c
  const int SIZE = sizeof(K) * 2;
  uint8_t signature[SIZE];
  const struct uECC_Curve_t *curve;
  curve = uECC_secp256r1();

  if (uECC_sign(K, x, len, signature, curve) == 0) {
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <sign_message+0x2c>)
 800180a:	9300      	str	r3, [sp, #0]
uint8_t sign_message(uint8_t *x, uint8_t len) {
 800180c:	460a      	mov	r2, r1
  if (uECC_sign(K, x, len, signature, curve) == 0) {
 800180e:	ab02      	add	r3, sp, #8
 8001810:	4601      	mov	r1, r0
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <sign_message+0x30>)
 8001814:	f7ff ffca 	bl	80017ac <uECC_sign>
 8001818:	b908      	cbnz	r0, 800181e <sign_message+0x1a>
    infinite_led_blink_red(); // error
 800181a:	f7fe feeb 	bl	80005f4 <infinite_led_blink_red>
  }
  simpleserial_put('r', SIZE, signature);
 800181e:	aa02      	add	r2, sp, #8
 8001820:	2140      	movs	r1, #64	; 0x40
 8001822:	2072      	movs	r0, #114	; 0x72
 8001824:	f000 f9bc 	bl	8001ba0 <simpleserial_put>
  return 0x00;
}
 8001828:	2000      	movs	r0, #0
 800182a:	b013      	add	sp, #76	; 0x4c
 800182c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001830:	08002b8c 	.word	0x08002b8c
 8001834:	200000a4 	.word	0x200000a4

08001838 <uECC_point_mult>:
  uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}

void uECC_point_mult(uECC_word_t *result, const uECC_word_t *point,
                     const uECC_word_t *scalar, uECC_Curve curve) {
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	4605      	mov	r5, r0
 800183e:	460e      	mov	r6, r1
 8001840:	4610      	mov	r0, r2
  uECC_word_t tmp1[uECC_MAX_WORDS];
  uECC_word_t tmp2[uECC_MAX_WORDS];
  uECC_word_t *p2[2] = {tmp1, tmp2};
 8001842:	a904      	add	r1, sp, #16
 8001844:	aa0c      	add	r2, sp, #48	; 0x30
                     const uECC_word_t *scalar, uECC_Curve curve) {
 8001846:	461c      	mov	r4, r3
  uECC_word_t *p2[2] = {tmp1, tmp2};
 8001848:	9102      	str	r1, [sp, #8]
 800184a:	9203      	str	r2, [sp, #12]
  uECC_word_t carry = regularize_k(scalar, tmp1, tmp2, curve);
 800184c:	f7ff f858 	bl	8000900 <regularize_k>

  EccPoint_mult(result, point, p2[!carry], 0, curve->num_n_bits + 1, curve);
 8001850:	fab0 f280 	clz	r2, r0
 8001854:	8863      	ldrh	r3, [r4, #2]
 8001856:	9400      	str	r4, [sp, #0]
 8001858:	a914      	add	r1, sp, #80	; 0x50
 800185a:	0952      	lsrs	r2, r2, #5
 800185c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001860:	3301      	adds	r3, #1
 8001862:	f852 2c48 	ldr.w	r2, [r2, #-72]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4631      	mov	r1, r6
 800186a:	4628      	mov	r0, r5
 800186c:	f7ff fce6 	bl	800123c <EccPoint_mult.constprop.0>
}
 8001870:	b014      	add	sp, #80	; 0x50
 8001872:	bd70      	pop	{r4, r5, r6, pc}

08001874 <run_pmul_fixed>:
uint8_t run_pmul_fixed(uint8_t *k, uint8_t len) {
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	4604      	mov	r4, r0
    kwords[7 - i] = 0;
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	4668      	mov	r0, sp
 8001880:	f7fe fcea 	bl	8000258 <memset>
 8001884:	ad07      	add	r5, sp, #28
 8001886:	2300      	movs	r3, #0
    for (j = 0; j < 4; j++) {
 8001888:	18e6      	adds	r6, r4, r3
    kwords[7 - i] = 0;
 800188a:	2218      	movs	r2, #24
 800188c:	2100      	movs	r1, #0
      kwords[7 - i] |= k[i * 4 + j] << ((3 - j) * 8);
 800188e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001892:	4090      	lsls	r0, r2
    for (j = 0; j < 4; j++) {
 8001894:	3a08      	subs	r2, #8
 8001896:	f112 0f08 	cmn.w	r2, #8
      kwords[7 - i] |= k[i * 4 + j] << ((3 - j) * 8);
 800189a:	ea41 0100 	orr.w	r1, r1, r0
    for (j = 0; j < 4; j++) {
 800189e:	d1f6      	bne.n	800188e <run_pmul_fixed+0x1a>
  for (i = 0; i < 8; i++) {
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	f845 1904 	str.w	r1, [r5], #-4
 80018a8:	d1ee      	bne.n	8001888 <run_pmul_fixed+0x14>
  uECC_point_mult(Q, curve->G, kwords, curve);
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <run_pmul_fixed+0x4c>)
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <run_pmul_fixed+0x50>)
 80018ae:	466a      	mov	r2, sp
 80018b0:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80018b4:	f7ff ffc0 	bl	8001838 <uECC_point_mult>
}
 80018b8:	2000      	movs	r0, #0
 80018ba:	b008      	add	sp, #32
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
 80018be:	bf00      	nop
 80018c0:	08002b8c 	.word	0x08002b8c
 80018c4:	20000060 	.word	0x20000060

080018c8 <enable_trace>:
  DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <enable_trace+0xac>)
 80018ca:	6853      	ldr	r3, [r2, #4]
 80018cc:	f043 0320 	orr.w	r3, r3, #32
void enable_trace(void) {
 80018d0:	b510      	push	{r4, lr}
  DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 80018d2:	6053      	str	r3, [r2, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 80018d4:	4a28      	ldr	r2, [pc, #160]	; (8001978 <enable_trace+0xb0>)
  ITM->LAR = 0xC5ACCE55;
 80018d6:	4c29      	ldr	r4, [pc, #164]	; (800197c <enable_trace+0xb4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 80018d8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80018dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <enable_trace+0xb8>)
 80018e6:	2200      	movs	r2, #0
  TPI->SPPR = 2; // default to SWO with NRZ encoding
 80018e8:	2102      	movs	r1, #2
  TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
 80018ea:	611a      	str	r2, [r3, #16]
  TPI->CSPSR = 0x00000008; // 4 trace lanes
 80018ec:	2008      	movs	r0, #8
  TPI->SPPR = 2; // default to SWO with NRZ encoding
 80018ee:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
  TPI->FFCR = 0x102; // packet framing enabled
 80018f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80018f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
  TPI->CSPSR = 0x00000008; // 4 trace lanes
 80018fa:	6058      	str	r0, [r3, #4]
  ITM->LAR = 0xC5ACCE55;
 80018fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
  ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 8001900:	4920      	ldr	r1, [pc, #128]	; (8001984 <enable_trace+0xbc>)
  ITM->LAR = 0xC5ACCE55;
 8001902:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
  ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 8001906:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80
  ITM->TER = 0xFFFFFFFF;                   // Enable all stimulus ports
 800190a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
  ITM->TPR = 0x00000000;                   // allow unpriviledged access
 8001912:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
  DWT->CTRL =
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800191e:	6019      	str	r1, [r3, #0]
  DWT->CTRL |=
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	f441 61c2 	orr.w	r1, r1, #1552	; 0x610
 8001926:	f041 0101 	orr.w	r1, r1, #1
 800192a:	6019      	str	r1, [r3, #0]
  DWT->COMP0 = 0x00001d60; // AES subbytes
 800192c:	f44f 51eb 	mov.w	r1, #7520	; 0x1d60
 8001930:	6219      	str	r1, [r3, #32]
  DWT->COMP1 = 0x00001d68; // AES mixcolumns
 8001932:	f641 5168 	movw	r1, #7528	; 0x1d68
  DWT->MASK0 = 0;
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  DWT->FUNCTION0 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 8001938:	6298      	str	r0, [r3, #40]	; 0x28
  DWT->COMP1 = 0x00001d68; // AES mixcolumns
 800193a:	6319      	str	r1, [r3, #48]	; 0x30
  DWT->MASK1 = 0;
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  DWT->FUNCTION1 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 800193e:	6398      	str	r0, [r3, #56]	; 0x38
  ETM->LAR = 0xC5ACCE55;
 8001940:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001944:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
  ETM_SetupMode();
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800194e:	6019      	str	r1, [r3, #0]
  ETM->CR = ETM_CR_ETMEN; // Enable ETM output port
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	6019      	str	r1, [r3, #0]
  ETM->TRACEIDR = 1;      // Trace bus ID for TPIU
 8001956:	2101      	movs	r1, #1
 8001958:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  ETM->TEEVR =
 800195c:	490a      	ldr	r1, [pc, #40]	; (8001988 <enable_trace+0xc0>)
  ETM->FFLR = 0;          // Stall processor when FIFO is full
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  ETM->TEEVR =
 8001960:	6219      	str	r1, [r3, #32]
  ETM->TESSEICR =
 8001962:	210f      	movs	r1, #15
 8001964:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
  ETM->TECR1 = 0; // tracing is unaffected by the trace start/stop logic
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  ETM_TraceMode();
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bd10      	pop	{r4, pc}
 8001974:	e0042000 	.word	0xe0042000
 8001978:	e000ed00 	.word	0xe000ed00
 800197c:	c5acce55 	.word	0xc5acce55
 8001980:	e0040000 	.word	0xe0040000
 8001984:	00010009 	.word	0x00010009
 8001988:	000150a0 	.word	0x000150a0

0800198c <reenable_trace>:
uint8_t reenable_trace(uint8_t *x, uint8_t len) {
 800198c:	b508      	push	{r3, lr}
  enable_trace();
 800198e:	f7ff ff9b 	bl	80018c8 <enable_trace>
}
 8001992:	2000      	movs	r0, #0
 8001994:	bd08      	pop	{r3, pc}

08001996 <print>:
void print(const char *ptr) {
 8001996:	b510      	push	{r4, lr}
 8001998:	1e44      	subs	r4, r0, #1
  while (*ptr != (char)0) {
 800199a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800199e:	b900      	cbnz	r0, 80019a2 <print+0xc>
}
 80019a0:	bd10      	pop	{r4, pc}
    putch(*ptr);
 80019a2:	f000 fa85 	bl	8001eb0 <putch>
    ptr++;
 80019a6:	e7f8      	b.n	800199a <print+0x4>

080019a8 <info>:
uint8_t info(uint8_t *x, uint8_t len) {
 80019a8:	b508      	push	{r3, lr}
  print("ChipWhisperer simpleserial-trace-ecc, compiled ");
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <info+0x24>)
 80019ac:	f7ff fff3 	bl	8001996 <print>
  print(__DATE__);
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <info+0x28>)
 80019b2:	f7ff fff0 	bl	8001996 <print>
  print(", ");
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <info+0x2c>)
 80019b8:	f7ff ffed 	bl	8001996 <print>
  print(__TIME__);
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <info+0x30>)
 80019be:	f7ff ffea 	bl	8001996 <print>
  print("\n");
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <info+0x34>)
 80019c4:	f7ff ffe7 	bl	8001996 <print>
}
 80019c8:	2000      	movs	r0, #0
 80019ca:	bd08      	pop	{r3, pc}
 80019cc:	08002c73 	.word	0x08002c73
 80019d0:	08002ca3 	.word	0x08002ca3
 80019d4:	08002caf 	.word	0x08002caf
 80019d8:	08002cb2 	.word	0x08002cb2
 80019dc:	08002cbb 	.word	0x08002cbb

080019e0 <main>:

// void get_signed_message(uint8_t *x, uint8_t len) {}

int main(void) {
 80019e0:	b508      	push	{r3, lr}
  platform_init();
 80019e2:	f000 f99b 	bl	8001d1c <platform_init>
  init_uart();
 80019e6:	f000 f9d9 	bl	8001d9c <init_uart>
  trigger_setup();
 80019ea:	f000 fa15 	bl	8001e18 <trigger_setup>
  g_rng_function = rng_function;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <main+0xa8>)
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <main+0xac>)
 80019f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  uECC_set_rng(rng_fn);
  simpleserial_init();
 80019f6:	f000 f8bd 	bl	8001b74 <simpleserial_init>
  
  simpleserial_addcmd('f', 32, run_pmul_fixed);
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <main+0xb0>)
 80019fc:	2120      	movs	r1, #32
 80019fe:	2066      	movs	r0, #102	; 0x66
 8001a00:	f000 f8b4 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('a', 32, set_px);
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <main+0xb4>)
 8001a06:	2120      	movs	r1, #32
 8001a08:	2061      	movs	r0, #97	; 0x61
 8001a0a:	f000 f8af 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('b', 32, set_py);
 8001a0e:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <main+0xb8>)
 8001a10:	2120      	movs	r1, #32
 8001a12:	2062      	movs	r0, #98	; 0x62
 8001a14:	f000 f8aa 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('p', 32, get_qx);
 8001a18:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <main+0xbc>)
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	2070      	movs	r0, #112	; 0x70
 8001a1e:	f000 f8a5 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('q', 32, get_qy);
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <main+0xc0>)
 8001a24:	2120      	movs	r1, #32
 8001a26:	2071      	movs	r0, #113	; 0x71
 8001a28:	f000 f8a0 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('x', 0, reset);
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <main+0xc4>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	; 0x78
 8001a32:	f000 f89b 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('i', 0, info);
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <main+0xc8>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2069      	movs	r0, #105	; 0x69
 8001a3c:	f000 f896 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('e', 0, reenable_trace);
 8001a40:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <main+0xcc>)
 8001a42:	2100      	movs	r1, #0
 8001a44:	2065      	movs	r0, #101	; 0x65
 8001a46:	f000 f891 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('s', 5, setreg);
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <main+0xd0>)
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	2073      	movs	r0, #115	; 0x73
 8001a50:	f000 f88c 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('g', 5, getreg);
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <main+0xd4>)
 8001a56:	2105      	movs	r1, #5
 8001a58:	2067      	movs	r0, #103	; 0x67
 8001a5a:	f000 f887 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('c', 4, set_pcsample_params);
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <main+0xd8>)
 8001a60:	2104      	movs	r1, #4
 8001a62:	2063      	movs	r0, #99	; 0x63
 8001a64:	f000 f882 	bl	8001b6c <simpleserial_addcmd>

  simpleserial_addcmd('k', 32, set_k);
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <main+0xdc>)
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	206b      	movs	r0, #107	; 0x6b
 8001a6e:	f000 f87d 	bl	8001b6c <simpleserial_addcmd>
  simpleserial_addcmd('z', 64, sign_message);
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <main+0xe0>)
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	207a      	movs	r0, #122	; 0x7a
 8001a78:	f000 f878 	bl	8001b6c <simpleserial_addcmd>
  enable_trace();
 8001a7c:	f7ff ff24 	bl	80018c8 <enable_trace>

  while (1)
    simpleserial_get();
 8001a80:	f000 f8e8 	bl	8001c54 <simpleserial_get>
  while (1)
 8001a84:	e7fc      	b.n	8001a80 <main+0xa0>
 8001a86:	bf00      	nop
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	08000475 	.word	0x08000475
 8001a90:	08001875 	.word	0x08001875
 8001a94:	08000409 	.word	0x08000409
 8001a98:	0800043d 	.word	0x0800043d
 8001a9c:	0800058d 	.word	0x0800058d
 8001aa0:	080005c1 	.word	0x080005c1
 8001aa4:	08000471 	.word	0x08000471
 8001aa8:	080019a9 	.word	0x080019a9
 8001aac:	0800198d 	.word	0x0800198d
 8001ab0:	08000329 	.word	0x08000329
 8001ab4:	08000485 	.word	0x08000485
 8001ab8:	08000539 	.word	0x08000539
 8001abc:	08001765 	.word	0x08001765
 8001ac0:	08001805 	.word	0x08001805

08001ac4 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	4770      	bx	lr

08001ac8 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 8001aca:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 8001acc:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 8001ace:	4285      	cmp	r5, r0
 8001ad0:	db01      	blt.n	8001ad6 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	e021      	b.n	8001b1a <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 8001ad6:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8001ada:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 8001ade:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8001ae2:	b2f6      	uxtb	r6, r6
 8001ae4:	2e09      	cmp	r6, #9
 8001ae6:	d80c      	bhi.n	8001b02 <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8001ae8:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8001aea:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001aee:	b2e6      	uxtb	r6, r4
 8001af0:	2e09      	cmp	r6, #9
 8001af2:	d815      	bhi.n	8001b20 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8001af4:	7813      	ldrb	r3, [r2, #0]
 8001af6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8001afa:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 8001afc:	3501      	adds	r5, #1
 8001afe:	3201      	adds	r2, #1
 8001b00:	e7e5      	b.n	8001ace <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8001b02:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8001b06:	2e05      	cmp	r6, #5
 8001b08:	d802      	bhi.n	8001b10 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8001b0a:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8001b0c:	7014      	strb	r4, [r2, #0]
 8001b0e:	e7ec      	b.n	8001aea <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8001b10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8001b14:	2e05      	cmp	r6, #5
 8001b16:	d901      	bls.n	8001b1c <hex_decode+0x54>
			return 1;
 8001b18:	2001      	movs	r0, #1
}
 8001b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8001b1c:	3c57      	subs	r4, #87	; 0x57
 8001b1e:	e7f5      	b.n	8001b0c <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8001b20:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8001b24:	2c05      	cmp	r4, #5
 8001b26:	d802      	bhi.n	8001b2e <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8001b28:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8001b2c:	e7e2      	b.n	8001af4 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8001b2e:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8001b32:	2c05      	cmp	r4, #5
 8001b34:	d8f0      	bhi.n	8001b18 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8001b36:	7814      	ldrb	r4, [r2, #0]
 8001b38:	3b57      	subs	r3, #87	; 0x57
 8001b3a:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 8001b3e:	e7dc      	b.n	8001afa <hex_decode+0x32>

08001b40 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8001b42:	4e09      	ldr	r6, [pc, #36]	; (8001b68 <simpleserial_addcmd_flags+0x28>)
 8001b44:	6834      	ldr	r4, [r6, #0]
 8001b46:	2c0f      	cmp	r4, #15
 8001b48:	dc0b      	bgt.n	8001b62 <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 8001b4a:	29ff      	cmp	r1, #255	; 0xff
 8001b4c:	d809      	bhi.n	8001b62 <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 8001b4e:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 8001b52:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8001b56:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8001b58:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8001b5a:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8001b5c:	6034      	str	r4, [r6, #0]

	return 0;
 8001b5e:	2000      	movs	r0, #0
}
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e7fc      	b.n	8001b60 <simpleserial_addcmd_flags+0x20>
 8001b66:	bf00      	nop
 8001b68:	200000c4 	.word	0x200000c4

08001b6c <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f7ff bfe7 	b.w	8001b40 <simpleserial_addcmd_flags>
 8001b72:	0000      	movs	r0, r0

08001b74 <simpleserial_init>:
{
 8001b74:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <simpleserial_init+0x20>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2076      	movs	r0, #118	; 0x76
 8001b7c:	f7ff fff6 	bl	8001b6c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <simpleserial_init+0x24>)
 8001b82:	2077      	movs	r0, #119	; 0x77
 8001b84:	f7ff fff2 	bl	8001b6c <simpleserial_addcmd>
}
 8001b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <simpleserial_init+0x28>)
 8001b8e:	2079      	movs	r0, #121	; 0x79
 8001b90:	f7ff bfec 	b.w	8001b6c <simpleserial_addcmd>
 8001b94:	08001ac5 	.word	0x08001ac5
 8001b98:	08001c05 	.word	0x08001c05
 8001b9c:	08001be1 	.word	0x08001be1

08001ba0 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 8001ba6:	f000 f983 	bl	8001eb0 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8001baa:	4f0c      	ldr	r7, [pc, #48]	; (8001bdc <simpleserial_put+0x3c>)
 8001bac:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 8001bae:	f1c4 0401 	rsb	r4, r4, #1
 8001bb2:	1963      	adds	r3, r4, r5
 8001bb4:	429e      	cmp	r6, r3
 8001bb6:	dc04      	bgt.n	8001bc2 <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8001bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f000 b977 	b.w	8001eb0 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 8001bc2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	5cf8      	ldrb	r0, [r7, r3]
 8001bca:	f000 f971 	bl	8001eb0 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8001bce:	782b      	ldrb	r3, [r5, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	5cf8      	ldrb	r0, [r7, r3]
 8001bd6:	f000 f96b 	bl	8001eb0 <putch>
	for(int i = 0; i < size; i++)
 8001bda:	e7ea      	b.n	8001bb2 <simpleserial_put+0x12>
 8001bdc:	08002c60 	.word	0x08002c60

08001be0 <ss_num_commands>:
{
 8001be0:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 8001be4:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2072      	movs	r0, #114	; 0x72
 8001bf2:	f7ff ffd5 	bl	8001ba0 <simpleserial_put>
}
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	b003      	add	sp, #12
 8001bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfe:	bf00      	nop
 8001c00:	200000c4 	.word	0x200000c4

08001c04 <ss_get_commands>:
{
 8001c04:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001c06:	4c12      	ldr	r4, [pc, #72]	; (8001c50 <ss_get_commands+0x4c>)
 8001c08:	6821      	ldr	r1, [r4, #0]
{
 8001c0a:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001c0c:	b2cd      	uxtb	r5, r1
 8001c0e:	2000      	movs	r0, #0
 8001c10:	b2c3      	uxtb	r3, r0
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	f100 0001 	add.w	r0, r0, #1
 8001c18:	db09      	blt.n	8001c2e <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8001c1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001c1e:	466a      	mov	r2, sp
 8001c20:	b2c9      	uxtb	r1, r1
 8001c22:	2072      	movs	r0, #114	; 0x72
 8001c24:	f7ff ffbc 	bl	8001ba0 <simpleserial_put>
}
 8001c28:	2000      	movs	r0, #0
 8001c2a:	b00c      	add	sp, #48	; 0x30
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8001c2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c32:	3230      	adds	r2, #48	; 0x30
 8001c34:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8001c38:	446a      	add	r2, sp
 8001c3a:	791e      	ldrb	r6, [r3, #4]
 8001c3c:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8001c40:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8001c42:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8001c44:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8001c48:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001c4c:	e7e0      	b.n	8001c10 <ss_get_commands+0xc>
 8001c4e:	bf00      	nop
 8001c50:	200000c4 	.word	0x200000c4

08001c54 <simpleserial_get>:
{
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8001c58:	4d2f      	ldr	r5, [pc, #188]	; (8001d18 <simpleserial_get+0xc4>)
{
 8001c5a:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 8001c5e:	f000 f90d 	bl	8001e7c <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8001c62:	462a      	mov	r2, r5
 8001c64:	2300      	movs	r3, #0
 8001c66:	f852 1b04 	ldr.w	r1, [r2], #4
 8001c6a:	4299      	cmp	r1, r3
 8001c6c:	dc04      	bgt.n	8001c78 <simpleserial_get+0x24>
	if(cmd == num_commands)
 8001c6e:	d107      	bne.n	8001c80 <simpleserial_get+0x2c>
}
 8001c70:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8001c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 8001c78:	011c      	lsls	r4, r3, #4
 8001c7a:	5ca4      	ldrb	r4, [r4, r2]
 8001c7c:	4284      	cmp	r4, r0
 8001c7e:	d13e      	bne.n	8001cfe <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8001c80:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 8001c84:	011e      	lsls	r6, r3, #4
 8001c86:	7c23      	ldrb	r3, [r4, #16]
 8001c88:	07db      	lsls	r3, r3, #31
 8001c8a:	d514      	bpl.n	8001cb6 <simpleserial_get+0x62>
		uint8_t l = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8001c92:	f000 f8f3 	bl	8001e7c <getch>
 8001c96:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 8001c9a:	f000 f8ef 	bl	8001e7c <getch>
		if (hex_decode(1, buff, &l))
 8001c9e:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 8001ca0:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 8001ca4:	a942      	add	r1, sp, #264	; 0x108
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff ff0e 	bl	8001ac8 <hex_decode>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1df      	bne.n	8001c70 <simpleserial_get+0x1c>
		commands[cmd].len = l;
 8001cb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001cb4:	60a3      	str	r3, [r4, #8]
 8001cb6:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 8001cb8:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8001cba:	eb05 0806 	add.w	r8, r5, r6
 8001cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001cc2:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8001cc6:	d31c      	bcc.n	8001d02 <simpleserial_get+0xae>
	c = getch();
 8001cc8:	f000 f8d8 	bl	8001e7c <getch>
	if(c != '\n' && c != '\r')
 8001ccc:	280a      	cmp	r0, #10
 8001cce:	d001      	beq.n	8001cd4 <simpleserial_get+0x80>
 8001cd0:	280d      	cmp	r0, #13
 8001cd2:	d1cd      	bne.n	8001c70 <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8001cd4:	4435      	add	r5, r6
 8001cd6:	aa02      	add	r2, sp, #8
 8001cd8:	68ac      	ldr	r4, [r5, #8]
 8001cda:	a942      	add	r1, sp, #264	; 0x108
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff fef3 	bl	8001ac8 <hex_decode>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1c4      	bne.n	8001c70 <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8001ce6:	b2e1      	uxtb	r1, r4
 8001ce8:	68eb      	ldr	r3, [r5, #12]
 8001cea:	a802      	add	r0, sp, #8
 8001cec:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8001cee:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8001cf0:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	207a      	movs	r0, #122	; 0x7a
 8001cf8:	f7ff ff52 	bl	8001ba0 <simpleserial_put>
 8001cfc:	e7b8      	b.n	8001c70 <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 8001cfe:	3301      	adds	r3, #1
 8001d00:	e7b3      	b.n	8001c6a <simpleserial_get+0x16>
		c = getch();
 8001d02:	f000 f8bb 	bl	8001e7c <getch>
		if(c == '\n' || c == '\r')
 8001d06:	280a      	cmp	r0, #10
 8001d08:	d0b2      	beq.n	8001c70 <simpleserial_get+0x1c>
 8001d0a:	280d      	cmp	r0, #13
 8001d0c:	d0b0      	beq.n	8001c70 <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 8001d0e:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8001d12:	3401      	adds	r4, #1
 8001d14:	e7d3      	b.n	8001cbe <simpleserial_get+0x6a>
 8001d16:	bf00      	nop
 8001d18:	200000c4 	.word	0x200000c4

08001d1c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001d20:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001d22:	2603      	movs	r6, #3
 8001d24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d28:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001d2a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001d2c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001d30:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001d32:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d34:	f000 f8e0 	bl	8001ef8 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001d38:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001d3e:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d42:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d46:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001d48:	f000 fb44 	bl	80023d4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <platform_init+0x78>)
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d58:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d60:	4c0d      	ldr	r4, [pc, #52]	; (8001d98 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d66:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001d68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d6c:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d6e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d72:	f000 fbd5 	bl	8002520 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001d76:	462a      	mov	r2, r5
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7e:	f000 fc93 	bl	80026a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001d82:	462a      	mov	r2, r5
 8001d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 fc8d 	bl	80026a8 <HAL_GPIO_WritePin>
#endif
}
 8001d8e:	b016      	add	sp, #88	; 0x58
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000800 	.word	0x48000800

08001d9c <init_uart>:

void init_uart(void)
{
 8001d9c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001d9e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8001da2:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001daa:	2101      	movs	r1, #1
 8001dac:	2303      	movs	r3, #3
 8001dae:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8001db2:	4c16      	ldr	r4, [pc, #88]	; (8001e0c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001db4:	2307      	movs	r3, #7
 8001db6:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001db8:	6963      	ldr	r3, [r4, #20]
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbe:	6163      	str	r3, [r4, #20]
 8001dc0:	6963      	ldr	r3, [r4, #20]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001dc8:	a903      	add	r1, sp, #12
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8001dce:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001dd0:	f000 fba6 	bl	8002520 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001dd4:	480e      	ldr	r0, [pc, #56]	; (8001e10 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8001dd6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001e14 <init_uart+0x78>
 8001dda:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001dde:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001de4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001de8:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001dea:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001dec:	230c      	movs	r3, #12
 8001dee:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001df0:	69a3      	ldr	r3, [r4, #24]
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	61a3      	str	r3, [r4, #24]
 8001df8:	69a3      	ldr	r3, [r4, #24]
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001e02:	f000 fda5 	bl	8002950 <HAL_UART_Init>
}
 8001e06:	b008      	add	sp, #32
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	200001c8 	.word	0x200001c8
 8001e14:	40013800 	.word	0x40013800

08001e18 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <trigger_setup+0x44>)
{
 8001e1a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e22:	615a      	str	r2, [r3, #20]
 8001e24:	695b      	ldr	r3, [r3, #20]
{
 8001e26:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e30:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001e34:	2301      	movs	r3, #1
 8001e36:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001e3e:	a901      	add	r1, sp, #4
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e44:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001e48:	f000 fb6a 	bl	8002520 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001e4c:	462a      	mov	r2, r5
 8001e4e:	4621      	mov	r1, r4
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f000 fc28 	bl	80026a8 <HAL_GPIO_WritePin>
}
 8001e58:	b007      	add	sp, #28
 8001e5a:	bd30      	pop	{r4, r5, pc}
 8001e5c:	40021000 	.word	0x40021000

08001e60 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6a:	f000 bc1d 	b.w	80026a8 <HAL_GPIO_WritePin>

08001e6e <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e78:	f000 bc16 	b.w	80026a8 <HAL_GPIO_WritePin>

08001e7c <getch>:
}

char getch(void)
{
 8001e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001e7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ea8 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001e82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e86:	2201      	movs	r2, #1
 8001e88:	f10d 0107 	add.w	r1, sp, #7
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f000 fde0 	bl	8002a52 <HAL_UART_Receive>
 8001e92:	b918      	cbnz	r0, 8001e9c <getch+0x20>
  //putch(d);
  return d;
}
 8001e94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001e98:	b003      	add	sp, #12
 8001e9a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001e9c:	6a23      	ldr	r3, [r4, #32]
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6223      	str	r3, [r4, #32]
 8001ea4:	e7ed      	b.n	8001e82 <getch+0x6>
 8001ea6:	bf00      	nop
 8001ea8:	200001c8 	.word	0x200001c8
 8001eac:	40013800 	.word	0x40013800

08001eb0 <putch>:

void putch(char c)
{
 8001eb0:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001eb2:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001eb6:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f10d 0107 	add.w	r1, sp, #7
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <putch+0x1c>)
 8001ec2:	f000 fd70 	bl	80029a6 <HAL_UART_Transmit>
}
 8001ec6:	b003      	add	sp, #12
 8001ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ecc:	200001c8 	.word	0x200001c8

08001ed0 <change_err_led>:
#if (PLATFORM==CWLITEARM)
void change_err_led(unsigned int x)
{
    if (x)
 8001ed0:	b128      	cbz	r0, 8001ede <change_err_led+0xe>
         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001ed2:	2200      	movs	r2, #0
    else
         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <change_err_led+0x14>)
 8001ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eda:	f000 bbe5 	b.w	80026a8 <HAL_GPIO_WritePin>
 8001ede:	2201      	movs	r2, #1
 8001ee0:	e7f8      	b.n	8001ed4 <change_err_led+0x4>
 8001ee2:	bf00      	nop
 8001ee4:	48000800 	.word	0x48000800

08001ee8 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <HAL_GetTick+0xc>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	1c42      	adds	r2, r0, #1
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000238 	.word	0x20000238

08001ef8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef8:	6803      	ldr	r3, [r0, #0]
{
 8001efa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	07d9      	lsls	r1, r3, #31
{
 8001f00:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	d411      	bmi.n	8001f28 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	079a      	lsls	r2, r3, #30
 8001f08:	f100 8086 	bmi.w	8002018 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	071e      	lsls	r6, r3, #28
 8001f10:	f100 80f4 	bmi.w	80020fc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	075d      	lsls	r5, r3, #29
 8001f18:	f100 8140 	bmi.w	800219c <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1c:	69e2      	ldr	r2, [r4, #28]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	f040 81cb 	bne.w	80022ba <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
 8001f26:	e021      	b.n	8001f6c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f28:	499a      	ldr	r1, [pc, #616]	; (8002194 <HAL_RCC_OscConfig+0x29c>)
 8001f2a:	684b      	ldr	r3, [r1, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f34:	684b      	ldr	r3, [r1, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_OscConfig+0x7a>
 8001f3e:	684b      	ldr	r3, [r1, #4]
 8001f40:	03db      	lsls	r3, r3, #15
 8001f42:	d516      	bpl.n	8001f72 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	420b      	tst	r3, r1
 8001f62:	d0cf      	beq.n	8001f04 <HAL_RCC_OscConfig+0xc>
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1cc      	bne.n	8001f04 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
}
 8001f6c:	b002      	add	sp, #8
 8001f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	6862      	ldr	r2, [r4, #4]
 8001f74:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001f78:	d124      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xcc>
 8001f7a:	680b      	ldr	r3, [r1, #0]
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f82:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f84:	68a0      	ldr	r0, [r4, #8]
 8001f86:	f023 030f 	bic.w	r3, r3, #15
 8001f8a:	4303      	orrs	r3, r0
 8001f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8e:	b34a      	cbz	r2, 8001fe4 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001f90:	f7ff ffaa 	bl	8001ee8 <HAL_GetTick>
 8001f94:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001f98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	2701      	movs	r7, #1
 8001f9c:	fa96 f3a6 	rbit	r3, r6
 8001fa0:	680a      	ldr	r2, [r1, #0]
 8001fa2:	fa96 f3a6 	rbit	r3, r6
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa07 f303 	lsl.w	r3, r7, r3
 8001fb2:	4213      	tst	r3, r2
 8001fb4:	d1a6      	bne.n	8001f04 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb6:	f7ff ff97 	bl	8001ee8 <HAL_GetTick>
 8001fba:	1b40      	subs	r0, r0, r5
 8001fbc:	2864      	cmp	r0, #100	; 0x64
 8001fbe:	d9ed      	bls.n	8001f9c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e7d3      	b.n	8001f6c <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	680b      	ldr	r3, [r1, #0]
 8001fc6:	b932      	cbnz	r2, 8001fd6 <HAL_RCC_OscConfig+0xde>
 8001fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fcc:	600b      	str	r3, [r1, #0]
 8001fce:	680b      	ldr	r3, [r1, #0]
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	e7d4      	b.n	8001f80 <HAL_RCC_OscConfig+0x88>
 8001fd6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001fda:	d1f5      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xd0>
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	600b      	str	r3, [r1, #0]
 8001fe2:	e7ca      	b.n	8001f7a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001fe4:	f7ff ff80 	bl	8001ee8 <HAL_GetTick>
 8001fe8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001fec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	2701      	movs	r7, #1
 8001ff0:	fa96 f3a6 	rbit	r3, r6
 8001ff4:	680a      	ldr	r2, [r1, #0]
 8001ff6:	fa96 f3a6 	rbit	r3, r6
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	fa07 f303 	lsl.w	r3, r7, r3
 8002006:	4213      	tst	r3, r2
 8002008:	f43f af7c 	beq.w	8001f04 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff ff6c 	bl	8001ee8 <HAL_GetTick>
 8002010:	1b40      	subs	r0, r0, r5
 8002012:	2864      	cmp	r0, #100	; 0x64
 8002014:	d9ec      	bls.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
 8002016:	e7d3      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002018:	495e      	ldr	r1, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x29c>)
 800201a:	684b      	ldr	r3, [r1, #4]
 800201c:	f013 0f0c 	tst.w	r3, #12
 8002020:	d007      	beq.n	8002032 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002022:	684b      	ldr	r3, [r1, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d121      	bne.n	8002070 <HAL_RCC_OscConfig+0x178>
 800202c:	684b      	ldr	r3, [r1, #4]
 800202e:	03df      	lsls	r7, r3, #15
 8002030:	d41e      	bmi.n	8002070 <HAL_RCC_OscConfig+0x178>
 8002032:	2302      	movs	r3, #2
 8002034:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002038:	6808      	ldr	r0, [r1, #0]
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2201      	movs	r2, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	4203      	tst	r3, r0
 800204e:	d002      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
 8002050:	6923      	ldr	r3, [r4, #16]
 8002052:	4293      	cmp	r3, r2
 8002054:	d189      	bne.n	8001f6a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	6808      	ldr	r0, [r1, #0]
 8002058:	23f8      	movs	r3, #248	; 0xf8
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	fab3 f283 	clz	r2, r3
 8002062:	6963      	ldr	r3, [r4, #20]
 8002064:	4093      	lsls	r3, r2
 8002066:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
 800206e:	e74d      	b.n	8001f0c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	6922      	ldr	r2, [r4, #16]
 8002072:	2501      	movs	r5, #1
 8002074:	b302      	cbz	r2, 80020b8 <HAL_RCC_OscConfig+0x1c0>
 8002076:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	2702      	movs	r7, #2
 800208a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800208c:	f7ff ff2c 	bl	8001ee8 <HAL_GetTick>
 8002090:	4606      	mov	r6, r0
 8002092:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	680a      	ldr	r2, [r1, #0]
 8002098:	fa97 f3a7 	rbit	r3, r7
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa05 f303 	lsl.w	r3, r5, r3
 80020a8:	4213      	tst	r3, r2
 80020aa:	d1d4      	bne.n	8002056 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff ff1c 	bl	8001ee8 <HAL_GetTick>
 80020b0:	1b80      	subs	r0, r0, r6
 80020b2:	2802      	cmp	r0, #2
 80020b4:	d9ed      	bls.n	8002092 <HAL_RCC_OscConfig+0x19a>
 80020b6:	e783      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 80020b8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	2702      	movs	r7, #2
 80020cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020ce:	f7ff ff0b 	bl	8001ee8 <HAL_GetTick>
 80020d2:	4606      	mov	r6, r0
 80020d4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d8:	680a      	ldr	r2, [r1, #0]
 80020da:	fa97 f3a7 	rbit	r3, r7
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	fa05 f303 	lsl.w	r3, r5, r3
 80020ea:	4213      	tst	r3, r2
 80020ec:	f43f af0e 	beq.w	8001f0c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff fefa 	bl	8001ee8 <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9ec      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1dc>
 80020fa:	e761      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fc:	69a2      	ldr	r2, [r4, #24]
 80020fe:	4d25      	ldr	r5, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x29c>)
 8002100:	4825      	ldr	r0, [pc, #148]	; (8002198 <HAL_RCC_OscConfig+0x2a0>)
 8002102:	2101      	movs	r1, #1
 8002104:	b312      	cbz	r2, 800214c <HAL_RCC_OscConfig+0x254>
 8002106:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	4403      	add	r3, r0
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	2602      	movs	r6, #2
 8002114:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8002116:	f7ff fee7 	bl	8001ee8 <HAL_GetTick>
 800211a:	4607      	mov	r7, r0
 800211c:	fa96 f3a6 	rbit	r3, r6
 8002120:	fa96 f3a6 	rbit	r3, r6
 8002124:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002128:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800212a:	fa96 f3a6 	rbit	r3, r6
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	4213      	tst	r3, r2
 800213c:	f47f aeea 	bne.w	8001f14 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002140:	f7ff fed2 	bl	8001ee8 <HAL_GetTick>
 8002144:	1bc0      	subs	r0, r0, r7
 8002146:	2802      	cmp	r0, #2
 8002148:	d9e8      	bls.n	800211c <HAL_RCC_OscConfig+0x224>
 800214a:	e739      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 800214c:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	4403      	add	r3, r0
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	2602      	movs	r6, #2
 800215a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800215c:	f7ff fec4 	bl	8001ee8 <HAL_GetTick>
 8002160:	4607      	mov	r7, r0
 8002162:	fa96 f3a6 	rbit	r3, r6
 8002166:	fa96 f3a6 	rbit	r3, r6
 800216a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002170:	fa96 f3a6 	rbit	r3, r6
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4213      	tst	r3, r2
 8002182:	f43f aec7 	beq.w	8001f14 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7ff feaf 	bl	8001ee8 <HAL_GetTick>
 800218a:	1bc0      	subs	r0, r0, r7
 800218c:	2802      	cmp	r0, #2
 800218e:	d9e8      	bls.n	8002162 <HAL_RCC_OscConfig+0x26a>
 8002190:	e716      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219c:	498a      	ldr	r1, [pc, #552]	; (80023c8 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	69cb      	ldr	r3, [r1, #28]
 80021a0:	00d8      	lsls	r0, r3, #3
 80021a2:	d433      	bmi.n	800220c <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	69cb      	ldr	r3, [r1, #28]
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	61cb      	str	r3, [r1, #28]
 80021ac:	69cb      	ldr	r3, [r1, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021b6:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4e84      	ldr	r6, [pc, #528]	; (80023cc <HAL_RCC_OscConfig+0x4d4>)
 80021ba:	6833      	ldr	r3, [r6, #0]
 80021bc:	05da      	lsls	r2, r3, #23
 80021be:	d527      	bpl.n	8002210 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	68e3      	ldr	r3, [r4, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d134      	bne.n	8002230 <HAL_RCC_OscConfig+0x338>
 80021c6:	6a0b      	ldr	r3, [r1, #32]
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80021ce:	f7ff fe8b 	bl	8001ee8 <HAL_GetTick>
 80021d2:	2602      	movs	r6, #2
 80021d4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	f04f 0801 	mov.w	r8, #1
 80021da:	fa96 f3a6 	rbit	r3, r6
 80021de:	fa96 f3a6 	rbit	r3, r6
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d061      	beq.n	80022aa <HAL_RCC_OscConfig+0x3b2>
 80021e6:	6a0a      	ldr	r2, [r1, #32]
 80021e8:	fa96 f3a6 	rbit	r3, r6
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa08 f303 	lsl.w	r3, r8, r3
 80021f8:	4213      	tst	r3, r2
 80021fa:	d04e      	beq.n	800229a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	f43f ae8d 	beq.w	8001f1c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	69cb      	ldr	r3, [r1, #28]
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	61cb      	str	r3, [r1, #28]
 800220a:	e687      	b.n	8001f1c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800220c:	2500      	movs	r5, #0
 800220e:	e7d3      	b.n	80021b8 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002210:	6833      	ldr	r3, [r6, #0]
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002218:	f7ff fe66 	bl	8001ee8 <HAL_GetTick>
 800221c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	6833      	ldr	r3, [r6, #0]
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	d4cd      	bmi.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7ff fe60 	bl	8001ee8 <HAL_GetTick>
 8002228:	1bc0      	subs	r0, r0, r7
 800222a:	2864      	cmp	r0, #100	; 0x64
 800222c:	d9f7      	bls.n	800221e <HAL_RCC_OscConfig+0x326>
 800222e:	e6c7      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002230:	bb2b      	cbnz	r3, 800227e <HAL_RCC_OscConfig+0x386>
 8002232:	6a0b      	ldr	r3, [r1, #32]
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	620b      	str	r3, [r1, #32]
 800223a:	6a0b      	ldr	r3, [r1, #32]
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8002242:	f7ff fe51 	bl	8001ee8 <HAL_GetTick>
 8002246:	2602      	movs	r6, #2
 8002248:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	f04f 0801 	mov.w	r8, #1
 800224e:	fa96 f3a6 	rbit	r3, r6
 8002252:	fa96 f3a6 	rbit	r3, r6
 8002256:	b363      	cbz	r3, 80022b2 <HAL_RCC_OscConfig+0x3ba>
 8002258:	6a0a      	ldr	r2, [r1, #32]
 800225a:	fa96 f3a6 	rbit	r3, r6
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	fa08 f303 	lsl.w	r3, r8, r3
 800226a:	4213      	tst	r3, r2
 800226c:	d0c6      	beq.n	80021fc <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff fe3b 	bl	8001ee8 <HAL_GetTick>
 8002272:	f241 3388 	movw	r3, #5000	; 0x1388
 8002276:	1bc0      	subs	r0, r0, r7
 8002278:	4298      	cmp	r0, r3
 800227a:	d9e8      	bls.n	800224e <HAL_RCC_OscConfig+0x356>
 800227c:	e6a0      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	2b05      	cmp	r3, #5
 8002280:	6a0b      	ldr	r3, [r1, #32]
 8002282:	d103      	bne.n	800228c <HAL_RCC_OscConfig+0x394>
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	620b      	str	r3, [r1, #32]
 800228a:	e79c      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ce>
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	620b      	str	r3, [r1, #32]
 8002292:	6a0b      	ldr	r3, [r1, #32]
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	e798      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7ff fe25 	bl	8001ee8 <HAL_GetTick>
 800229e:	f241 3388 	movw	r3, #5000	; 0x1388
 80022a2:	1bc0      	subs	r0, r0, r7
 80022a4:	4298      	cmp	r0, r3
 80022a6:	d998      	bls.n	80021da <HAL_RCC_OscConfig+0x2e2>
 80022a8:	e68a      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 80022aa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80022b0:	e79a      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
 80022b2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80022b8:	e7cf      	b.n	800225a <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ba:	4943      	ldr	r1, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x4d0>)
 80022bc:	684b      	ldr	r3, [r1, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	f43f ae51 	beq.w	8001f6a <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	2a02      	cmp	r2, #2
 80022ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ce:	d154      	bne.n	800237a <HAL_RCC_OscConfig+0x482>
 80022d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022e6:	f7ff fdff 	bl	8001ee8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80023d0 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 80022ee:	4606      	mov	r6, r0
 80022f0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	2501      	movs	r5, #1
 80022f6:	fa97 f3a7 	rbit	r3, r7
 80022fa:	680a      	ldr	r2, [r1, #0]
 80022fc:	fa97 f3a7 	rbit	r3, r7
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa05 f303 	lsl.w	r3, r5, r3
 800230c:	4213      	tst	r3, r2
 800230e:	d12e      	bne.n	800236e <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8002314:	684a      	ldr	r2, [r1, #4]
 8002316:	4303      	orrs	r3, r0
 8002318:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002324:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002334:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	4f26      	ldr	r7, [pc, #152]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8002338:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800233a:	f7ff fdd5 	bl	8001ee8 <HAL_GetTick>
 800233e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002342:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	2601      	movs	r6, #1
 8002346:	fa95 f3a5 	rbit	r3, r5
 800234a:	680a      	ldr	r2, [r1, #0]
 800234c:	fa95 f3a5 	rbit	r3, r5
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa06 f303 	lsl.w	r3, r6, r3
 800235c:	4213      	tst	r3, r2
 800235e:	f47f ade1 	bne.w	8001f24 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fdc1 	bl	8001ee8 <HAL_GetTick>
 8002366:	1b00      	subs	r0, r0, r4
 8002368:	42b8      	cmp	r0, r7
 800236a:	d9ec      	bls.n	8002346 <HAL_RCC_OscConfig+0x44e>
 800236c:	e628      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff fdbb 	bl	8001ee8 <HAL_GetTick>
 8002372:	1b80      	subs	r0, r0, r6
 8002374:	4540      	cmp	r0, r8
 8002376:	d9be      	bls.n	80022f6 <HAL_RCC_OscConfig+0x3fe>
 8002378:	e622      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 800237a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002386:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002390:	f7ff fdaa 	bl	8001ee8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	4f0e      	ldr	r7, [pc, #56]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8002396:	4604      	mov	r4, r0
 8002398:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	2601      	movs	r6, #1
 800239e:	fa95 f3a5 	rbit	r3, r5
 80023a2:	680a      	ldr	r2, [r1, #0]
 80023a4:	fa95 f3a5 	rbit	r3, r5
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa06 f303 	lsl.w	r3, r6, r3
 80023b4:	4213      	tst	r3, r2
 80023b6:	f43f adb5 	beq.w	8001f24 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fd95 	bl	8001ee8 <HAL_GetTick>
 80023be:	1b00      	subs	r0, r0, r4
 80023c0:	42b8      	cmp	r0, r7
 80023c2:	d9ec      	bls.n	800239e <HAL_RCC_OscConfig+0x4a6>
 80023c4:	e5fc      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
 80023d0:	00030d40 	.word	0x00030d40

080023d4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x144>)
{
 80023d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	428b      	cmp	r3, r1
{
 80023e0:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023e2:	d31b      	bcc.n	800241c <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	0790      	lsls	r0, r2, #30
 80023e8:	d424      	bmi.n	8002434 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	07d2      	lsls	r2, r2, #31
 80023ec:	d42a      	bmi.n	8002444 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80023ee:	4a4a      	ldr	r2, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x144>)
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	428b      	cmp	r3, r1
 80023f8:	d87a      	bhi.n	80024f0 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	0743      	lsls	r3, r0, #29
 80023fe:	f100 8082 	bmi.w	8002506 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002402:	f010 0008 	ands.w	r0, r0, #8
 8002406:	d014      	beq.n	8002432 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002408:	4a44      	ldr	r2, [pc, #272]	; (800251c <HAL_RCC_ClockConfig+0x148>)
 800240a:	6921      	ldr	r1, [r4, #16]
 800240c:	6853      	ldr	r3, [r2, #4]
 800240e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002412:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002416:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002418:	2000      	movs	r0, #0
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	f023 0307 	bic.w	r3, r3, #7
 8002422:	430b      	orrs	r3, r1
 8002424:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	428b      	cmp	r3, r1
 800242e:	d0d9      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4839      	ldr	r0, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x148>)
 8002436:	68a5      	ldr	r5, [r4, #8]
 8002438:	6843      	ldr	r3, [r0, #4]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243e:	432b      	orrs	r3, r5
 8002440:	6043      	str	r3, [r0, #4]
 8002442:	e7d2      	b.n	80023ea <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	4d35      	ldr	r5, [pc, #212]	; (800251c <HAL_RCC_ClockConfig+0x148>)
 8002448:	2a01      	cmp	r2, #1
 800244a:	d127      	bne.n	800249c <HAL_RCC_ClockConfig+0xc8>
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002454:	6828      	ldr	r0, [r5, #0]
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	d0e2      	beq.n	8002430 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	686b      	ldr	r3, [r5, #4]
 800246c:	f023 0303 	bic.w	r3, r3, #3
 8002470:	431a      	orrs	r2, r3
 8002472:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8002474:	f7ff fd38 	bl	8001ee8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002478:	6863      	ldr	r3, [r4, #4]
 800247a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800247c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	d11e      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002484:	686b      	ldr	r3, [r5, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d0af      	beq.n	80023ee <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7ff fd2b 	bl	8001ee8 <HAL_GetTick>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	42b8      	cmp	r0, r7
 8002496:	d9f5      	bls.n	8002484 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8002498:	2003      	movs	r0, #3
 800249a:	e7ca      	b.n	8002432 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	2a02      	cmp	r2, #2
 800249e:	bf0c      	ite	eq
 80024a0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80024a4:	2302      	movne	r3, #2
 80024a6:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	682e      	ldr	r6, [r5, #0]
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f303 	lsl.w	r3, r0, r3
 80024be:	4233      	tst	r3, r6
 80024c0:	e7d2      	b.n	8002468 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d10f      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c6:	686b      	ldr	r3, [r5, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d08e      	beq.n	80023ee <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7ff fd0a 	bl	8001ee8 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	42b8      	cmp	r0, r7
 80024d8:	d9f5      	bls.n	80024c6 <HAL_RCC_ClockConfig+0xf2>
 80024da:	e7dd      	b.n	8002498 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fd04 	bl	8001ee8 <HAL_GetTick>
 80024e0:	1b80      	subs	r0, r0, r6
 80024e2:	42b8      	cmp	r0, r7
 80024e4:	d8d8      	bhi.n	8002498 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	686b      	ldr	r3, [r5, #4]
 80024e8:	f013 0f0c 	tst.w	r3, #12
 80024ec:	d1f6      	bne.n	80024dc <HAL_RCC_ClockConfig+0x108>
 80024ee:	e77e      	b.n	80023ee <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f0:	6813      	ldr	r3, [r2, #0]
 80024f2:	f023 0307 	bic.w	r3, r3, #7
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	428b      	cmp	r3, r1
 8002502:	d195      	bne.n	8002430 <HAL_RCC_ClockConfig+0x5c>
 8002504:	e779      	b.n	80023fa <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002506:	4905      	ldr	r1, [pc, #20]	; (800251c <HAL_RCC_ClockConfig+0x148>)
 8002508:	68e3      	ldr	r3, [r4, #12]
 800250a:	684a      	ldr	r2, [r1, #4]
 800250c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002510:	431a      	orrs	r2, r3
 8002512:	604a      	str	r2, [r1, #4]
 8002514:	e775      	b.n	8002402 <HAL_RCC_ClockConfig+0x2e>
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800269c <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002528:	4c5d      	ldr	r4, [pc, #372]	; (80026a0 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 800252a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800252c:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002530:	680a      	ldr	r2, [r1, #0]
 8002532:	fa32 f503 	lsrs.w	r5, r2, r3
 8002536:	d102      	bne.n	800253e <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8002538:	b003      	add	sp, #12
 800253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800253e:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8002542:	ea1a 0202 	ands.w	r2, sl, r2
 8002546:	f000 809e 	beq.w	8002686 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254a:	684d      	ldr	r5, [r1, #4]
 800254c:	f025 0e10 	bic.w	lr, r5, #16
 8002550:	f1be 0f02 	cmp.w	lr, #2
 8002554:	d114      	bne.n	8002580 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8002556:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800255a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002562:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800256a:	270f      	movs	r7, #15
 800256c:	fa07 f70b 	lsl.w	r7, r7, fp
 8002570:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	690e      	ldr	r6, [r1, #16]
 8002576:	fa06 f60b 	lsl.w	r6, r6, fp
 800257a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800257c:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8002580:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002588:	2603      	movs	r6, #3
 800258a:	fa06 f70c 	lsl.w	r7, r6, ip
 800258e:	ea2b 0b07 	bic.w	fp, fp, r7
 8002592:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	f005 0703 	and.w	r7, r5, #3
 8002598:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800259c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a4:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80025a8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025aa:	d811      	bhi.n	80025d0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 80025ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ae:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b2:	68cf      	ldr	r7, [r1, #12]
 80025b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80025b8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80025bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80025be:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80025c8:	409f      	lsls	r7, r3
 80025ca:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80025ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80025d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	688e      	ldr	r6, [r1, #8]
 80025d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80025da:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80025dc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025de:	00ee      	lsls	r6, r5, #3
 80025e0:	d551      	bpl.n	8002686 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80025e6:	f046 0601 	orr.w	r6, r6, #1
 80025ea:	f8c8 6018 	str.w	r6, [r8, #24]
 80025ee:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80025f2:	f023 0703 	bic.w	r7, r3, #3
 80025f6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80025fa:	f006 0601 	and.w	r6, r6, #1
 80025fe:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002602:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002604:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002608:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800260a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800260c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002610:	f04f 0c0f 	mov.w	ip, #15
 8002614:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002618:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800261c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002620:	d033      	beq.n	800268a <HAL_GPIO_Init+0x16a>
 8002622:	4e20      	ldr	r6, [pc, #128]	; (80026a4 <HAL_GPIO_Init+0x184>)
 8002624:	42b0      	cmp	r0, r6
 8002626:	d032      	beq.n	800268e <HAL_GPIO_Init+0x16e>
 8002628:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800262c:	42b0      	cmp	r0, r6
 800262e:	d030      	beq.n	8002692 <HAL_GPIO_Init+0x172>
 8002630:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002634:	42b0      	cmp	r0, r6
 8002636:	d02e      	beq.n	8002696 <HAL_GPIO_Init+0x176>
 8002638:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800263c:	42b0      	cmp	r0, r6
 800263e:	bf0c      	ite	eq
 8002640:	2604      	moveq	r6, #4
 8002642:	2605      	movne	r6, #5
 8002644:	fa06 f60e 	lsl.w	r6, r6, lr
 8002648:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800264c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800264e:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002650:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002652:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002656:	bf0c      	ite	eq
 8002658:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800265a:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 800265c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800265e:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002660:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002664:	bf0c      	ite	eq
 8002666:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002668:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 800266a:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800266c:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002672:	bf0c      	ite	eq
 8002674:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002676:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8002678:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800267a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800267c:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800267e:	bf54      	ite	pl
 8002680:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002682:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8002684:	60e6      	str	r6, [r4, #12]
    position++;
 8002686:	3301      	adds	r3, #1
 8002688:	e752      	b.n	8002530 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800268a:	2600      	movs	r6, #0
 800268c:	e7da      	b.n	8002644 <HAL_GPIO_Init+0x124>
 800268e:	2601      	movs	r6, #1
 8002690:	e7d8      	b.n	8002644 <HAL_GPIO_Init+0x124>
 8002692:	2602      	movs	r6, #2
 8002694:	e7d6      	b.n	8002644 <HAL_GPIO_Init+0x124>
 8002696:	2603      	movs	r6, #3
 8002698:	e7d4      	b.n	8002644 <HAL_GPIO_Init+0x124>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010400 	.word	0x40010400
 80026a4:	48000400 	.word	0x48000400

080026a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	b10a      	cbz	r2, 80026ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026aa:	6181      	str	r1, [r0, #24]
 80026ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ae:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80026b0:	4770      	bx	lr
 80026b2:	0000      	movs	r0, r0

080026b4 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026b4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b6:	6881      	ldr	r1, [r0, #8]
 80026b8:	69c3      	ldr	r3, [r0, #28]
{
 80026ba:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026bc:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026be:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	4329      	orrs	r1, r5
 80026c2:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026c4:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026ca:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026ce:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026d0:	4321      	orrs	r1, r4
 80026d2:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	6851      	ldr	r1, [r2, #4]
 80026d6:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026d8:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026da:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80026de:	4321      	orrs	r1, r4
 80026e0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026e2:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026e4:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026e6:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026ea:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026ec:	4321      	orrs	r1, r4
 80026ee:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f0:	4962      	ldr	r1, [pc, #392]	; (800287c <UART_SetConfig+0x1c8>)
 80026f2:	428a      	cmp	r2, r1
 80026f4:	d116      	bne.n	8002724 <UART_SetConfig+0x70>
 80026f6:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 80026fa:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80026fc:	f001 0103 	and.w	r1, r1, #3
 8002700:	3901      	subs	r1, #1
 8002702:	2902      	cmp	r1, #2
 8002704:	f200 80b2 	bhi.w	800286c <UART_SetConfig+0x1b8>
 8002708:	4c5d      	ldr	r4, [pc, #372]	; (8002880 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270e:	5c61      	ldrb	r1, [r4, r1]
 8002710:	d177      	bne.n	8002802 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8002712:	2908      	cmp	r1, #8
 8002714:	d872      	bhi.n	80027fc <UART_SetConfig+0x148>
 8002716:	e8df f001 	tbb	[pc, r1]
 800271a:	acac      	.short	0xacac
 800271c:	71ac7124 	.word	0x71ac7124
 8002720:	7171      	.short	0x7171
 8002722:	a4          	.byte	0xa4
 8002723:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002724:	4957      	ldr	r1, [pc, #348]	; (8002884 <UART_SetConfig+0x1d0>)
 8002726:	428a      	cmp	r2, r1
 8002728:	d12c      	bne.n	8002784 <UART_SetConfig+0xd0>
 800272a:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 800272e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002730:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8002734:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002738:	f000 8090 	beq.w	800285c <UART_SetConfig+0x1a8>
 800273c:	d80b      	bhi.n	8002756 <UART_SetConfig+0xa2>
 800273e:	2900      	cmp	r1, #0
 8002740:	f000 8094 	beq.w	800286c <UART_SetConfig+0x1b8>
 8002744:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002748:	f000 8090 	beq.w	800286c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002750:	d054      	beq.n	80027fc <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002752:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002754:	e015      	b.n	8002782 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002756:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800275a:	d1f7      	bne.n	800274c <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002760:	d166      	bne.n	8002830 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002762:	6841      	ldr	r1, [r0, #4]
 8002764:	084b      	lsrs	r3, r1, #1
 8002766:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800276a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8002772:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002774:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002776:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800277a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800277e:	430b      	orrs	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]

}
 8002782:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002784:	4940      	ldr	r1, [pc, #256]	; (8002888 <UART_SetConfig+0x1d4>)
 8002786:	428a      	cmp	r2, r1
 8002788:	d110      	bne.n	80027ac <UART_SetConfig+0xf8>
 800278a:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 800278e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002790:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8002794:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002798:	d060      	beq.n	800285c <UART_SetConfig+0x1a8>
 800279a:	d804      	bhi.n	80027a6 <UART_SetConfig+0xf2>
 800279c:	2900      	cmp	r1, #0
 800279e:	d065      	beq.n	800286c <UART_SetConfig+0x1b8>
 80027a0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80027a4:	e7d0      	b.n	8002748 <UART_SetConfig+0x94>
 80027a6:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80027aa:	e7d6      	b.n	800275a <UART_SetConfig+0xa6>
 80027ac:	4937      	ldr	r1, [pc, #220]	; (800288c <UART_SetConfig+0x1d8>)
 80027ae:	428a      	cmp	r2, r1
 80027b0:	d110      	bne.n	80027d4 <UART_SetConfig+0x120>
 80027b2:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 80027b6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80027b8:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80027bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80027c0:	d04c      	beq.n	800285c <UART_SetConfig+0x1a8>
 80027c2:	d804      	bhi.n	80027ce <UART_SetConfig+0x11a>
 80027c4:	2900      	cmp	r1, #0
 80027c6:	d051      	beq.n	800286c <UART_SetConfig+0x1b8>
 80027c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80027cc:	e7bc      	b.n	8002748 <UART_SetConfig+0x94>
 80027ce:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80027d2:	e7c2      	b.n	800275a <UART_SetConfig+0xa6>
 80027d4:	492e      	ldr	r1, [pc, #184]	; (8002890 <UART_SetConfig+0x1dc>)
 80027d6:	428a      	cmp	r2, r1
 80027d8:	d1b8      	bne.n	800274c <UART_SetConfig+0x98>
 80027da:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 80027de:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80027e0:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 80027e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80027e8:	d038      	beq.n	800285c <UART_SetConfig+0x1a8>
 80027ea:	d804      	bhi.n	80027f6 <UART_SetConfig+0x142>
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d03d      	beq.n	800286c <UART_SetConfig+0x1b8>
 80027f0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80027f4:	e7a8      	b.n	8002748 <UART_SetConfig+0x94>
 80027f6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80027fa:	e7ae      	b.n	800275a <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80027fe:	2300      	movs	r3, #0
 8002800:	e7b9      	b.n	8002776 <UART_SetConfig+0xc2>
    switch (clocksource)
 8002802:	2908      	cmp	r1, #8
 8002804:	d8a5      	bhi.n	8002752 <UART_SetConfig+0x9e>
 8002806:	a301      	add	r3, pc, #4	; (adr r3, 800280c <UART_SetConfig+0x158>)
 8002808:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800280c:	08002849 	.word	0x08002849
 8002810:	08002849 	.word	0x08002849
 8002814:	08002831 	.word	0x08002831
 8002818:	08002753 	.word	0x08002753
 800281c:	08002849 	.word	0x08002849
 8002820:	08002753 	.word	0x08002753
 8002824:	08002753 	.word	0x08002753
 8002828:	08002753 	.word	0x08002753
 800282c:	08002853 	.word	0x08002853
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002830:	6841      	ldr	r1, [r0, #4]
 8002832:	084b      	lsrs	r3, r1, #1
 8002834:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002838:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800283c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002840:	b29b      	uxth	r3, r3
 8002842:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002844:	2000      	movs	r0, #0
        break;
 8002846:	e79c      	b.n	8002782 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002848:	6841      	ldr	r1, [r0, #4]
 800284a:	084b      	lsrs	r3, r1, #1
 800284c:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8002850:	e7f4      	b.n	800283c <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002852:	6841      	ldr	r1, [r0, #4]
 8002854:	084b      	lsrs	r3, r1, #1
 8002856:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800285a:	e7ef      	b.n	800283c <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002860:	d1f7      	bne.n	8002852 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002862:	6841      	ldr	r1, [r0, #4]
 8002864:	084b      	lsrs	r3, r1, #1
 8002866:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800286a:	e780      	b.n	800276e <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d1ea      	bne.n	8002848 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002872:	6841      	ldr	r1, [r0, #4]
 8002874:	084b      	lsrs	r3, r1, #1
 8002876:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 800287a:	e778      	b.n	800276e <UART_SetConfig+0xba>
 800287c:	40013800 	.word	0x40013800
 8002880:	08002c70 	.word	0x08002c70
 8002884:	40004400 	.word	0x40004400
 8002888:	40004800 	.word	0x40004800
 800288c:	40004c00 	.word	0x40004c00
 8002890:	40005000 	.word	0x40005000

08002894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	9f06      	ldr	r7, [sp, #24]
 8002898:	4604      	mov	r4, r0
 800289a:	4615      	mov	r5, r2
 800289c:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289e:	6822      	ldr	r2, [r4, #0]
 80028a0:	69d3      	ldr	r3, [r2, #28]
 80028a2:	ea31 0303 	bics.w	r3, r1, r3
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	42ab      	cmp	r3, r5
 80028ae:	d001      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	e014      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80028b4:	1c7b      	adds	r3, r7, #1
 80028b6:	d0f3      	beq.n	80028a0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028b8:	b997      	cbnz	r7, 80028e0 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80028cc:	2320      	movs	r3, #32
 80028ce:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80028d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80028d6:	2300      	movs	r3, #0
 80028d8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80028dc:	2003      	movs	r0, #3
}
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028e0:	f7ff fb02 	bl	8001ee8 <HAL_GetTick>
 80028e4:	1b80      	subs	r0, r0, r6
 80028e6:	42b8      	cmp	r0, r7
 80028e8:	d9d9      	bls.n	800289e <UART_WaitOnFlagUntilTimeout+0xa>
 80028ea:	e7e6      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0x26>

080028ec <UART_CheckIdleState>:
{
 80028ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	2100      	movs	r1, #0
 80028f2:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80028f4:	f7ff faf8 	bl	8001ee8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80028fe:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002900:	d417      	bmi.n	8002932 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	075b      	lsls	r3, r3, #29
 8002908:	d50a      	bpl.n	8002920 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800290a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	462b      	mov	r3, r5
 8002914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff ffbb 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 800291e:	b9a0      	cbnz	r0, 800294a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002920:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002922:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002924:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002928:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800292c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002930:	e00c      	b.n	800294c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002932:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	460a      	mov	r2, r1
 800293a:	4603      	mov	r3, r0
 800293c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff ffa7 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 8002946:	2800      	cmp	r0, #0
 8002948:	d0db      	beq.n	8002902 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
}
 800294c:	b003      	add	sp, #12
 800294e:	bd30      	pop	{r4, r5, pc}

08002950 <HAL_UART_Init>:
{
 8002950:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002952:	4604      	mov	r4, r0
 8002954:	b328      	cbz	r0, 80029a2 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002956:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800295a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800295e:	b90b      	cbnz	r3, 8002964 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002960:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8002964:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002966:	2324      	movs	r3, #36	; 0x24
 8002968:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800296c:	6813      	ldr	r3, [r2, #0]
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff fe9d 	bl	80026b4 <UART_SetConfig>
 800297a:	2801      	cmp	r0, #1
 800297c:	d011      	beq.n	80029a2 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800298e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8002996:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800299e:	f7ff bfa5 	b.w	80028ec <UART_CheckIdleState>
}
 80029a2:	2001      	movs	r0, #1
 80029a4:	bd10      	pop	{r4, pc}

080029a6 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029a8:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029aa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80029ae:	2b20      	cmp	r3, #32
{
 80029b0:	460d      	mov	r5, r1
 80029b2:	4604      	mov	r4, r0
 80029b4:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80029b6:	d14a      	bne.n	8002a4e <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	d046      	beq.n	8002a4a <HAL_UART_Transmit+0xa4>
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d044      	beq.n	8002a4a <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d042      	beq.n	8002a4e <HAL_UART_Transmit+0xa8>
 80029c8:	2301      	movs	r3, #1
 80029ca:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d2:	2321      	movs	r3, #33	; 0x21
 80029d4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029d8:	f7ff fa86 	bl	8001ee8 <HAL_GetTick>

    huart->TxXferSize = Size;
 80029dc:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80029e0:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80029e2:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80029e6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80029ea:	b292      	uxth	r2, r2
 80029ec:	b962      	cbnz	r2, 8002a08 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	9600      	str	r6, [sp, #0]
 80029f0:	463b      	mov	r3, r7
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff ff4d 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 80029fa:	b998      	cbnz	r0, 8002a24 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fc:	2320      	movs	r3, #32
 80029fe:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a02:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002a06:	e00e      	b.n	8002a26 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8002a08:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0c:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	b292      	uxth	r2, r2
 8002a12:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff ff39 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 8002a22:	b110      	cbz	r0, 8002a2a <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002a24:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a26:	b003      	add	sp, #12
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2a:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a2c:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	d107      	bne.n	8002a44 <HAL_UART_Transmit+0x9e>
 8002a34:	6923      	ldr	r3, [r4, #16]
 8002a36:	b92b      	cbnz	r3, 8002a44 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a38:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002a40:	8513      	strh	r3, [r2, #40]	; 0x28
 8002a42:	e7d0      	b.n	80029e6 <HAL_UART_Transmit+0x40>
 8002a44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a48:	e7fa      	b.n	8002a40 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e7eb      	b.n	8002a26 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002a4e:	2002      	movs	r0, #2
 8002a50:	e7e9      	b.n	8002a26 <HAL_UART_Transmit+0x80>

08002a52 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a56:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a58:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002a5c:	2b20      	cmp	r3, #32
{
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4604      	mov	r4, r0
 8002a62:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a64:	d15c      	bne.n	8002b20 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8002a66:	2d00      	cmp	r5, #0
 8002a68:	d058      	beq.n	8002b1c <HAL_UART_Receive+0xca>
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	d056      	beq.n	8002b1c <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d054      	beq.n	8002b20 <HAL_UART_Receive+0xce>
 8002a76:	2301      	movs	r3, #1
 8002a78:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002a7c:	6803      	ldr	r3, [r0, #0]
 8002a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a82:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a88:	2322      	movs	r3, #34	; 0x22
 8002a8a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a8e:	f7ff fa2b 	bl	8001ee8 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a92:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002a94:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002a9c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002a9e:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002aa2:	d115      	bne.n	8002ad0 <HAL_UART_Receive+0x7e>
 8002aa4:	6923      	ldr	r3, [r4, #16]
 8002aa6:	b98b      	cbnz	r3, 8002acc <HAL_UART_Receive+0x7a>
 8002aa8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002aac:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002ab0:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002ab4:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002ab8:	b280      	uxth	r0, r0
 8002aba:	b980      	cbnz	r0, 8002ade <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002abc:	2320      	movs	r3, #32
 8002abe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ac6:	b002      	add	sp, #8
 8002ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002acc:	23ff      	movs	r3, #255	; 0xff
 8002ace:	e7ed      	b.n	8002aac <HAL_UART_Receive+0x5a>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ed      	bne.n	8002ab0 <HAL_UART_Receive+0x5e>
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f8      	beq.n	8002acc <HAL_UART_Receive+0x7a>
 8002ada:	237f      	movs	r3, #127	; 0x7f
 8002adc:	e7e6      	b.n	8002aac <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002ade:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	4643      	mov	r3, r8
 8002aee:	2200      	movs	r2, #0
 8002af0:	2120      	movs	r1, #32
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fece 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 8002af8:	b9a0      	cbnz	r0, 8002b24 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afa:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002afc:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b02:	d106      	bne.n	8002b12 <HAL_UART_Receive+0xc0>
 8002b04:	6922      	ldr	r2, [r4, #16]
 8002b06:	b922      	cbnz	r2, 8002b12 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b0a:	403b      	ands	r3, r7
 8002b0c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002b10:	e7d0      	b.n	8002ab4 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b14:	403b      	ands	r3, r7
 8002b16:	f805 3b01 	strb.w	r3, [r5], #1
 8002b1a:	e7cb      	b.n	8002ab4 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e7d2      	b.n	8002ac6 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8002b20:	2002      	movs	r0, #2
 8002b22:	e7d0      	b.n	8002ac6 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8002b24:	2003      	movs	r0, #3
 8002b26:	e7ce      	b.n	8002ac6 <HAL_UART_Receive+0x74>

08002b28 <Reset_Handler>:
 8002b28:	2100      	movs	r1, #0
 8002b2a:	e003      	b.n	8002b34 <LoopCopyDataInit>

08002b2c <CopyDataInit>:
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <LoopForever+0x2>)
 8002b2e:	585b      	ldr	r3, [r3, r1]
 8002b30:	5043      	str	r3, [r0, r1]
 8002b32:	3104      	adds	r1, #4

08002b34 <LoopCopyDataInit>:
 8002b34:	480a      	ldr	r0, [pc, #40]	; (8002b60 <LoopForever+0x6>)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <LoopForever+0xa>)
 8002b38:	1842      	adds	r2, r0, r1
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3f6      	bcc.n	8002b2c <CopyDataInit>
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <LoopForever+0xe>)
 8002b40:	e002      	b.n	8002b48 <LoopFillZerobss>

08002b42 <FillZerobss>:
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	3204      	adds	r2, #4

08002b48 <LoopFillZerobss>:
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <LoopForever+0x12>)
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3f9      	bcc.n	8002b42 <FillZerobss>
 8002b4e:	f3af 8000 	nop.w
 8002b52:	f7fd fb5d 	bl	8000210 <__libc_init_array>
 8002b56:	f7fe ff43 	bl	80019e0 <main>

08002b5a <LoopForever>:
 8002b5a:	e7fe      	b.n	8002b5a <LoopForever>
 8002b5c:	08002cc8 	.word	0x08002cc8
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000240 	.word	0x20000240

08002b70 <BusFault_Handler>:
 8002b70:	e7fe      	b.n	8002b70 <BusFault_Handler>
 8002b72:	0000      	movs	r0, r0

08002b74 <_init>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr

08002b80 <_fini>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr
